
BlackPill_ssd1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eac  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb4  08007bb4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bbc  08007bbc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000009c  08007c60  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08007c60  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b7  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f02  00000000  00000000  0002d283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002f188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017934  00000000  00000000  000305f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2ab  00000000  00000000  00047f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094844  00000000  00000000  000551d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  000e9a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cf0 	.word	0x08004cf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08004cf0 	.word	0x08004cf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f967 	bl	800185c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 fac1 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fbd9 	bl	8000d48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000596:	f000 fb77 	bl	8000c88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 fbab 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800059e:	f000 fb21 	bl	8000be4 <MX_ADC1_Init>
    * the ssd1306 display module a sequence of commands in order to initiate the displaying of graphics
    *
    * */


   ssd1306_Init();//Initiate display.
 80005a2:	f000 fcd1 	bl	8000f48 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(GameStarted && InGame )//If the game has ever started and the player is playing
 80005a6:	4b89      	ldr	r3, [pc, #548]	; (80007cc <main+0x248>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 81db 	beq.w	8000966 <main+0x3e2>
 80005b0:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <main+0x24c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	f000 81d6 	beq.w	8000966 <main+0x3e2>
	  {
	  potVal = 0; // Starts the value read from the potentiometer as 0, otherwise it will start calculating averages with a previous read value
 80005ba:	4b86      	ldr	r3, [pc, #536]	; (80007d4 <main+0x250>)
 80005bc:	f04f 0200 	mov.w	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < 50; i++)//acquires the ADC value 50 times
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e019      	b.n	80005fc <main+0x78>
	  {
	  HAL_ADC_Start(&hadc1); //Starts the ADC module
 80005c8:	4883      	ldr	r0, [pc, #524]	; (80007d8 <main+0x254>)
 80005ca:	f001 fa21 	bl	8001a10 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);// Start conversion from Analog to Digital
 80005ce:	f04f 31ff 	mov.w	r1, #4294967295
 80005d2:	4881      	ldr	r0, [pc, #516]	; (80007d8 <main+0x254>)
 80005d4:	f001 fad0 	bl	8001b78 <HAL_ADC_PollForConversion>
	  potVal += HAL_ADC_GetValue(&hadc1);// Sums the value read to the previously read values
 80005d8:	487f      	ldr	r0, [pc, #508]	; (80007d8 <main+0x254>)
 80005da:	f001 fb58 	bl	8001c8e <HAL_ADC_GetValue>
 80005de:	ee07 0a90 	vmov	s15, r0
 80005e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005e6:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <main+0x250>)
 80005e8:	edd3 7a00 	vldr	s15, [r3]
 80005ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <main+0x250>)
 80005f2:	edc3 7a00 	vstr	s15, [r3]
	  for(uint8_t i = 0; i < 50; i++)//acquires the ADC value 50 times
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	3301      	adds	r3, #1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b31      	cmp	r3, #49	; 0x31
 8000600:	d9e2      	bls.n	80005c8 <main+0x44>
	  }

	  potVal = potVal/50;//Calculates by the average
 8000602:	4b74      	ldr	r3, [pc, #464]	; (80007d4 <main+0x250>)
 8000604:	ed93 7a00 	vldr	s14, [r3]
 8000608:	eddf 6a74 	vldr	s13, [pc, #464]	; 80007dc <main+0x258>
 800060c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000610:	4b70      	ldr	r3, [pc, #448]	; (80007d4 <main+0x250>)
 8000612:	edc3 7a00 	vstr	s15, [r3]

	  paddlePos = potVal * PotConverter;//Small MAP conversion from the value read and averaged from the ADC
 8000616:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <main+0x250>)
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80007e0 <main+0x25c>
 8000620:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000624:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80007e4 <main+0x260>
 8000628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b6c      	ldr	r3, [pc, #432]	; (80007e8 <main+0x264>)
 8000638:	801a      	strh	r2, [r3, #0]

	  // Draws the paddle, which is consisted of 3 lines. The top line is shorter to make visible the corners.
	  // this could be done with a function, but given how short this code is, I just can't be bothered
	  ssd1306_Fill(BGNDcolour);//Background
 800063a:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <main+0x268>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fcec 	bl	800101c <ssd1306_Fill>
	  ssd1306_Line(paddlePos, 63, paddlePos + paddlelength, 63, ELMTScolour);//paddle
 8000644:	4b68      	ldr	r3, [pc, #416]	; (80007e8 <main+0x264>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2d8      	uxtb	r0, r3
 800064a:	4b67      	ldr	r3, [pc, #412]	; (80007e8 <main+0x264>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	3320      	adds	r3, #32
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b66      	ldr	r3, [pc, #408]	; (80007f0 <main+0x26c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	233f      	movs	r3, #63	; 0x3f
 800065c:	213f      	movs	r1, #63	; 0x3f
 800065e:	f000 fe43 	bl	80012e8 <ssd1306_Line>
	  ssd1306_Line(paddlePos, 62, paddlePos + paddlelength, 62, ELMTScolour);//paddle
 8000662:	4b61      	ldr	r3, [pc, #388]	; (80007e8 <main+0x264>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b2d8      	uxtb	r0, r3
 8000668:	4b5f      	ldr	r3, [pc, #380]	; (80007e8 <main+0x264>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	3320      	adds	r3, #32
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <main+0x26c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	233e      	movs	r3, #62	; 0x3e
 800067a:	213e      	movs	r1, #62	; 0x3e
 800067c:	f000 fe34 	bl	80012e8 <ssd1306_Line>
	  ssd1306_Line(paddlePos  + paddleCorner, 61, paddlePos + paddlelength - paddleCorner, 61, ELMTScolour);//paddle
 8000680:	4b59      	ldr	r3, [pc, #356]	; (80007e8 <main+0x264>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	3306      	adds	r3, #6
 8000688:	b2d8      	uxtb	r0, r3
 800068a:	4b57      	ldr	r3, [pc, #348]	; (80007e8 <main+0x264>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	331a      	adds	r3, #26
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b56      	ldr	r3, [pc, #344]	; (80007f0 <main+0x26c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	233d      	movs	r3, #61	; 0x3d
 800069c:	213d      	movs	r1, #61	; 0x3d
 800069e:	f000 fe23 	bl	80012e8 <ssd1306_Line>

	  //Draws the score to the screen
	  ssd1306_SetCursor(2, 2);// sets the cursor to a fixed position
 80006a2:	2102      	movs	r1, #2
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fe07 	bl	80012b8 <ssd1306_SetCursor>
	  sprintf(playerScoretext, "Score: %d", playerScorenum);// converts the sore number to the score text
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <main+0x270>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4951      	ldr	r1, [pc, #324]	; (80007f8 <main+0x274>)
 80006b2:	4852      	ldr	r0, [pc, #328]	; (80007fc <main+0x278>)
 80006b4:	f003 febc 	bl	8004430 <siprintf>
	  ssd1306_WriteString(playerScoretext, Font_6x8, ELMTScolour);//draws it to the screen
 80006b8:	4b4d      	ldr	r3, [pc, #308]	; (80007f0 <main+0x26c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4a50      	ldr	r2, [pc, #320]	; (8000800 <main+0x27c>)
 80006be:	ca06      	ldmia	r2, {r1, r2}
 80006c0:	484e      	ldr	r0, [pc, #312]	; (80007fc <main+0x278>)
 80006c2:	f000 fdd3 	bl	800126c <ssd1306_WriteString>

	  //Draws the players Lives to the screen. The logic is the same as the score drawing, but a little math is needed first
	  playerLifenum = (playerLifenum <= 0)? maxLife : playerLifenum;//just make sure that there is no negative lives.
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <main+0x280>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <main+0x150>
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <main+0x280>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	e000      	b.n	80006d6 <main+0x152>
 80006d4:	2305      	movs	r3, #5
 80006d6:	4a4b      	ldr	r2, [pc, #300]	; (8000804 <main+0x280>)
 80006d8:	7013      	strb	r3, [r2, #0]
	  sprintf(playerLifetext, "Lives: %d", playerLifenum);
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <main+0x280>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	4949      	ldr	r1, [pc, #292]	; (8000808 <main+0x284>)
 80006e2:	484a      	ldr	r0, [pc, #296]	; (800080c <main+0x288>)
 80006e4:	f003 fea4 	bl	8004430 <siprintf>
	  ssd1306_SetCursor(79, 2);
 80006e8:	2102      	movs	r1, #2
 80006ea:	204f      	movs	r0, #79	; 0x4f
 80006ec:	f000 fde4 	bl	80012b8 <ssd1306_SetCursor>
	  ssd1306_WriteString(playerLifetext, Font_6x8, ELMTScolour);
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <main+0x26c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4a42      	ldr	r2, [pc, #264]	; (8000800 <main+0x27c>)
 80006f6:	ca06      	ldmia	r2, {r1, r2}
 80006f8:	4844      	ldr	r0, [pc, #272]	; (800080c <main+0x288>)
 80006fa:	f000 fdb7 	bl	800126c <ssd1306_WriteString>

	  //Here the ball is drawn
	  ssd1306_FillCircle(Xpos,Ypos,2, ELMTScolour);//The ball is a filled circle
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <main+0x28c>)
 8000700:	7818      	ldrb	r0, [r3, #0]
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <main+0x290>)
 8000704:	7819      	ldrb	r1, [r3, #0]
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <main+0x26c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2202      	movs	r2, #2
 800070c:	f000 fe58 	bl	80013c0 <ssd1306_FillCircle>
	  ssd1306_DrawPixel(Xpos-1, Ypos-1, BGNDcolour );//with a little pixel as the reflection
 8000710:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x28c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <main+0x290>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4a32      	ldr	r2, [pc, #200]	; (80007ec <main+0x268>)
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f000 fcc5 	bl	80010b4 <ssd1306_DrawPixel>

	  //Finally the screen is updated
	  ssd1306_UpdateScreen();
 800072a:	f000 fc9b 	bl	8001064 <ssd1306_UpdateScreen>
       *
	   */

	  //First the position of the ball is calculated
	  //Here we use the uniform linear motion, simplified. The time base is the frame rate.
	  Xpos += Xvelocity;
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <main+0x28c>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <main+0x294>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <main+0x28c>)
 800073c:	701a      	strb	r2, [r3, #0]
	  Ypos += Yvelocity;
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <main+0x290>)
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <main+0x298>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <main+0x290>)
 800074c:	701a      	strb	r2, [r3, #0]

	  //Here We implement the paddle interaction with the ball
	  if(Ypos >= paddleYborder)// If the ball is ad the Y coordinate of the paddle
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <main+0x290>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b3b      	cmp	r3, #59	; 0x3b
 8000754:	f240 809b 	bls.w	800088e <main+0x30a>
	  {
		if(((Xpos >= (paddlePos + paddleCorner))&&(Xpos <= (paddlePos + paddlelength - paddleCorner))))//and if the ball is at the center portion of the paddle
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x264>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	3305      	adds	r3, #5
 800075e:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <main+0x28c>)
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	4293      	cmp	r3, r2
 8000764:	da60      	bge.n	8000828 <main+0x2a4>
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <main+0x28c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0x264>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	331a      	adds	r3, #26
 8000772:	429a      	cmp	r2, r3
 8000774:	dc58      	bgt.n	8000828 <main+0x2a4>
		{
			if(Xpos == (paddlePos + (paddlelength/2)))//and if the ball is at the absolute center of the paddle
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <main+0x28c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <main+0x264>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	3310      	adds	r3, #16
 8000782:	429a      	cmp	r2, r3
 8000784:	d111      	bne.n	80007aa <main+0x226>
			{
				uint8_t swap = Yvelocity;//we swap the X and Y components of the velocity to give the game a different dinamic
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <main+0x298>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	71bb      	strb	r3, [r7, #6]
				Yvelocity = -Xvelocity;//The paddle reflects the ball as the physics mandates
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <main+0x294>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	425b      	negs	r3, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <main+0x298>)
 8000796:	701a      	strb	r2, [r3, #0]
				Xvelocity = swap;
 8000798:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <main+0x294>)
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	7013      	strb	r3, [r2, #0]
				PaddleInteractions += 100;//This is very difficult to do, so the player deserves a lot of points
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <main+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3364      	adds	r3, #100	; 0x64
 80007a4:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <main+0x29c>)
 80007a6:	6013      	str	r3, [r2, #0]
			if(Xpos == (paddlePos + (paddlelength/2)))//and if the ball is at the absolute center of the paddle
 80007a8:	e071      	b.n	800088e <main+0x30a>
			}else
			{
			Yvelocity = - Yvelocity;// If the ball is at the center portion but not at the absolute center,
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <main+0x298>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	425b      	negs	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <main+0x298>)
 80007b4:	701a      	strb	r2, [r3, #0]
			PaddleInteractions += 5;// The payer gets just 5 points, because it's easy to hit those spots
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x29c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3305      	adds	r3, #5
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <main+0x29c>)
 80007be:	6013      	str	r3, [r2, #0]
			RefreshPeriod--;//the game gets a little bit faster
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <main+0x2a0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <main+0x2a0>)
 80007c8:	6013      	str	r3, [r2, #0]
			if(Xpos == (paddlePos + (paddlelength/2)))//and if the ball is at the absolute center of the paddle
 80007ca:	e060      	b.n	800088e <main+0x30a>
 80007cc:	2000019e 	.word	0x2000019e
 80007d0:	2000019d 	.word	0x2000019d
 80007d4:	200001ac 	.word	0x200001ac
 80007d8:	200000b8 	.word	0x200000b8
 80007dc:	42480000 	.word	0x42480000
 80007e0:	42c00000 	.word	0x42c00000
 80007e4:	45800000 	.word	0x45800000
 80007e8:	200001a0 	.word	0x200001a0
 80007ec:	20000004 	.word	0x20000004
 80007f0:	2000019c 	.word	0x2000019c
 80007f4:	200001b4 	.word	0x200001b4
 80007f8:	08004d08 	.word	0x08004d08
 80007fc:	200001d0 	.word	0x200001d0
 8000800:	2000000c 	.word	0x2000000c
 8000804:	20000005 	.word	0x20000005
 8000808:	08004d14 	.word	0x08004d14
 800080c:	200001bc 	.word	0x200001bc
 8000810:	20000000 	.word	0x20000000
 8000814:	20000001 	.word	0x20000001
 8000818:	20000002 	.word	0x20000002
 800081c:	20000003 	.word	0x20000003
 8000820:	200001b0 	.word	0x200001b0
 8000824:	20000008 	.word	0x20000008
			}
		}else{
			if(
			   ((Xpos > (paddlePos))&&((Xpos < (paddlePos + paddleCorner)))) ||
 8000828:	4b9e      	ldr	r3, [pc, #632]	; (8000aa4 <main+0x520>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b9e      	ldr	r3, [pc, #632]	; (8000aa8 <main+0x524>)
 8000830:	881b      	ldrh	r3, [r3, #0]
			if(
 8000832:	429a      	cmp	r2, r3
 8000834:	d906      	bls.n	8000844 <main+0x2c0>
			   ((Xpos > (paddlePos))&&((Xpos < (paddlePos + paddleCorner)))) ||
 8000836:	4b9c      	ldr	r3, [pc, #624]	; (8000aa8 <main+0x524>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	3305      	adds	r3, #5
 800083c:	4a99      	ldr	r2, [pc, #612]	; (8000aa4 <main+0x520>)
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	4293      	cmp	r3, r2
 8000842:	da0e      	bge.n	8000862 <main+0x2de>
		      ((Xpos > (paddlePos + paddlelength - paddleCorner)) && (Xpos < (paddlePos + paddlelength)))
 8000844:	4b97      	ldr	r3, [pc, #604]	; (8000aa4 <main+0x520>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <main+0x524>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	331a      	adds	r3, #26
			   ((Xpos > (paddlePos))&&((Xpos < (paddlePos + paddleCorner)))) ||
 8000850:	429a      	cmp	r2, r3
 8000852:	dd1c      	ble.n	800088e <main+0x30a>
		      ((Xpos > (paddlePos + paddlelength - paddleCorner)) && (Xpos < (paddlePos + paddlelength)))
 8000854:	4b94      	ldr	r3, [pc, #592]	; (8000aa8 <main+0x524>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	331f      	adds	r3, #31
 800085a:	4a92      	ldr	r2, [pc, #584]	; (8000aa4 <main+0x520>)
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	4293      	cmp	r3, r2
 8000860:	db15      	blt.n	800088e <main+0x30a>
			  )//If the ball hits the edges of the paddle
			{
			Yvelocity = -Yvelocity; // The ball reverses the vector of it's motion
 8000862:	4b92      	ldr	r3, [pc, #584]	; (8000aac <main+0x528>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	425b      	negs	r3, r3
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b90      	ldr	r3, [pc, #576]	; (8000aac <main+0x528>)
 800086c:	701a      	strb	r2, [r3, #0]
			Xvelocity = -Xvelocity; // at a slight angle
 800086e:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <main+0x52c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	425b      	negs	r3, r3
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b8e      	ldr	r3, [pc, #568]	; (8000ab0 <main+0x52c>)
 8000878:	701a      	strb	r2, [r3, #0]
			PaddleInteractions += 10; //The player gets 10 points because its a little more difficult to hit the edges
 800087a:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <main+0x530>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	330a      	adds	r3, #10
 8000880:	4a8c      	ldr	r2, [pc, #560]	; (8000ab4 <main+0x530>)
 8000882:	6013      	str	r3, [r2, #0]
			RefreshPeriod -= 2; // The game gets a little bit faster
 8000884:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <main+0x534>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b02      	subs	r3, #2
 800088a:	4a8b      	ldr	r2, [pc, #556]	; (8000ab8 <main+0x534>)
 800088c:	6013      	str	r3, [r2, #0]

	  //Here We implement the interactions with the walls of the display

	  // if the ball hits the right or left walls, it bounces IE it
	  // reverses the direction of the X velocity vector.
	  if(Xpos < leftBorder)
 800088e:	4b85      	ldr	r3, [pc, #532]	; (8000aa4 <main+0x520>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d808      	bhi.n	80008a8 <main+0x324>
	  {
		  Xpos = leftBorder;
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <main+0x520>)
 8000898:	2203      	movs	r2, #3
 800089a:	701a      	strb	r2, [r3, #0]
		  Xvelocity = - Xvelocity;
 800089c:	4b84      	ldr	r3, [pc, #528]	; (8000ab0 <main+0x52c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	425b      	negs	r3, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b82      	ldr	r3, [pc, #520]	; (8000ab0 <main+0x52c>)
 80008a6:	701a      	strb	r2, [r3, #0]
	  }
	  if(Xpos > rightBorder)
 80008a8:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <main+0x520>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b7d      	cmp	r3, #125	; 0x7d
 80008ae:	d908      	bls.n	80008c2 <main+0x33e>
	  {
		  Xpos = rightBorder;
 80008b0:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <main+0x520>)
 80008b2:	227d      	movs	r2, #125	; 0x7d
 80008b4:	701a      	strb	r2, [r3, #0]
		  Xvelocity = - Xvelocity;
 80008b6:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <main+0x52c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	425b      	negs	r3, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b7c      	ldr	r3, [pc, #496]	; (8000ab0 <main+0x52c>)
 80008c0:	701a      	strb	r2, [r3, #0]
	  }

	  // If the ball hits the botton
	  if(Ypos > bottonBorder){
 80008c2:	4b7e      	ldr	r3, [pc, #504]	; (8000abc <main+0x538>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b3d      	cmp	r3, #61	; 0x3d
 80008c8:	d921      	bls.n	800090e <main+0x38a>
		  uint8_t swap = Yvelocity;//we swap the X and Y components of the velocity to give the game a different dinamic
 80008ca:	4b78      	ldr	r3, [pc, #480]	; (8000aac <main+0x528>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	717b      	strb	r3, [r7, #5]
		  Yvelocity = -Xvelocity;//The paddle reflects the ball as the physics mandates
 80008d0:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <main+0x52c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	425b      	negs	r3, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b74      	ldr	r3, [pc, #464]	; (8000aac <main+0x528>)
 80008da:	701a      	strb	r2, [r3, #0]
		  Xvelocity = swap;
 80008dc:	4a74      	ldr	r2, [pc, #464]	; (8000ab0 <main+0x52c>)
 80008de:	797b      	ldrb	r3, [r7, #5]
 80008e0:	7013      	strb	r3, [r2, #0]
	 	  playerLifenum--;//Takes one life from the player
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <main+0x53c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <main+0x53c>)
 80008ec:	701a      	strb	r2, [r3, #0]
	 	  PaddleInteractions -= 10;//Takes 10 points from the player
 80008ee:	4b71      	ldr	r3, [pc, #452]	; (8000ab4 <main+0x530>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3b0a      	subs	r3, #10
 80008f4:	4a6f      	ldr	r2, [pc, #444]	; (8000ab4 <main+0x530>)
 80008f6:	6013      	str	r3, [r2, #0]
	 	  Xpos = edgeOffset;// Restarts the position of the ball so it goes back to the top left corner
 80008f8:	4b6a      	ldr	r3, [pc, #424]	; (8000aa4 <main+0x520>)
 80008fa:	2203      	movs	r2, #3
 80008fc:	701a      	strb	r2, [r3, #0]
	 	  Ypos = edgeOffset;
 80008fe:	4b6f      	ldr	r3, [pc, #444]	; (8000abc <main+0x538>)
 8000900:	2203      	movs	r2, #3
 8000902:	701a      	strb	r2, [r3, #0]
	 	  RefreshPeriod -=2;//Makes the game a lot faster
 8000904:	4b6c      	ldr	r3, [pc, #432]	; (8000ab8 <main+0x534>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b02      	subs	r3, #2
 800090a:	4a6b      	ldr	r2, [pc, #428]	; (8000ab8 <main+0x534>)
 800090c:	6013      	str	r3, [r2, #0]
	  }
	  if(Ypos < topBorder){//If it hits the top, it bounces. U know the drill
 800090e:	4b6b      	ldr	r3, [pc, #428]	; (8000abc <main+0x538>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d808      	bhi.n	8000928 <main+0x3a4>
	 	  Ypos = topBorder;
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <main+0x538>)
 8000918:	2203      	movs	r2, #3
 800091a:	701a      	strb	r2, [r3, #0]
	 	  Yvelocity = - Yvelocity;
 800091c:	4b63      	ldr	r3, [pc, #396]	; (8000aac <main+0x528>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	425b      	negs	r3, r3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <main+0x528>)
 8000926:	701a      	strb	r2, [r3, #0]
	  }

	  //Here we handle the game state
	  InGame = (playerLifenum == 0)? 0 : 1;//If the player looses all its lives, we flag the game to stop
 8000928:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <main+0x53c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <main+0x540>)
 800093a:	701a      	strb	r2, [r3, #0]

	  PresentTime = (HAL_GetTick() - StartTime)/1000;//Every time the frame is updated, we update the time elapsed from the start of the game
 800093c:	f000 fff4 	bl	8001928 <HAL_GetTick>
 8000940:	4603      	mov	r3, r0
 8000942:	4a61      	ldr	r2, [pc, #388]	; (8000ac8 <main+0x544>)
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	4a60      	ldr	r2, [pc, #384]	; (8000acc <main+0x548>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	099b      	lsrs	r3, r3, #6
 8000950:	461a      	mov	r2, r3
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <main+0x54c>)
 8000954:	601a      	str	r2, [r3, #0]
	  playerScorenum = PaddleInteractions + PresentTime;// The score is calculated. It takes into account the paddle interactions
 8000956:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <main+0x530>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b5d      	ldr	r3, [pc, #372]	; (8000ad0 <main+0x54c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a5c      	ldr	r2, [pc, #368]	; (8000ad4 <main+0x550>)
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e091      	b.n	8000a8a <main+0x506>
	                                                    // and how long the player lasted in game.

	  }else
	  {
		  if(GameStarted)//If the game has ever started, we show a game over screen
 8000966:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <main+0x554>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d044      	beq.n	80009f8 <main+0x474>
		  {
			  //HAL_Delay(500);
			  ssd1306_Fill(Black);//filed
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fb54 	bl	800101c <ssd1306_Fill>
			  ssd1306_SetCursor(16, 2);
 8000974:	2102      	movs	r1, #2
 8000976:	2010      	movs	r0, #16
 8000978:	f000 fc9e 	bl	80012b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("GAME OVER", Font_11x18, White);
 800097c:	4a57      	ldr	r2, [pc, #348]	; (8000adc <main+0x558>)
 800097e:	2301      	movs	r3, #1
 8000980:	ca06      	ldmia	r2, {r1, r2}
 8000982:	4857      	ldr	r0, [pc, #348]	; (8000ae0 <main+0x55c>)
 8000984:	f000 fc72 	bl	800126c <ssd1306_WriteString>

			  topScorenum = (playerScorenum > topScorenum)? playerScorenum : topScorenum;//If the player has the highest score, the top Score is updated
 8000988:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <main+0x560>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <main+0x550>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4293      	cmp	r3, r2
 8000992:	bfb8      	it	lt
 8000994:	4613      	movlt	r3, r2
 8000996:	4a53      	ldr	r2, [pc, #332]	; (8000ae4 <main+0x560>)
 8000998:	6013      	str	r3, [r2, #0]

			  //Here we display the information
			  ssd1306_SetCursor(15, 29);
 800099a:	211d      	movs	r1, #29
 800099c:	200f      	movs	r0, #15
 800099e:	f000 fc8b 	bl	80012b8 <ssd1306_SetCursor>
			  sprintf(topScoretext, "Top Score: %d", topScorenum);
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <main+0x560>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	494f      	ldr	r1, [pc, #316]	; (8000ae8 <main+0x564>)
 80009aa:	4850      	ldr	r0, [pc, #320]	; (8000aec <main+0x568>)
 80009ac:	f003 fd40 	bl	8004430 <siprintf>
			  ssd1306_WriteString(topScoretext, Font_7x10, White);
 80009b0:	4a4f      	ldr	r2, [pc, #316]	; (8000af0 <main+0x56c>)
 80009b2:	2301      	movs	r3, #1
 80009b4:	ca06      	ldmia	r2, {r1, r2}
 80009b6:	484d      	ldr	r0, [pc, #308]	; (8000aec <main+0x568>)
 80009b8:	f000 fc58 	bl	800126c <ssd1306_WriteString>

			  ssd1306_SetCursor(25, 40);
 80009bc:	2128      	movs	r1, #40	; 0x28
 80009be:	2019      	movs	r0, #25
 80009c0:	f000 fc7a 	bl	80012b8 <ssd1306_SetCursor>
			  sprintf(playerScoretext, "Score: %d", playerScorenum);
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <main+0x550>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	494a      	ldr	r1, [pc, #296]	; (8000af4 <main+0x570>)
 80009cc:	484a      	ldr	r0, [pc, #296]	; (8000af8 <main+0x574>)
 80009ce:	f003 fd2f 	bl	8004430 <siprintf>
			  ssd1306_WriteString(playerScoretext, Font_7x10, White);
 80009d2:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <main+0x56c>)
 80009d4:	2301      	movs	r3, #1
 80009d6:	ca06      	ldmia	r2, {r1, r2}
 80009d8:	4847      	ldr	r0, [pc, #284]	; (8000af8 <main+0x574>)
 80009da:	f000 fc47 	bl	800126c <ssd1306_WriteString>
			  ssd1306_SetCursor(31, 51);
 80009de:	2133      	movs	r1, #51	; 0x33
 80009e0:	201f      	movs	r0, #31
 80009e2:	f000 fc69 	bl	80012b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("Press START", Font_6x8, White);
 80009e6:	4a45      	ldr	r2, [pc, #276]	; (8000afc <main+0x578>)
 80009e8:	2301      	movs	r3, #1
 80009ea:	ca06      	ldmia	r2, {r1, r2}
 80009ec:	4844      	ldr	r0, [pc, #272]	; (8000b00 <main+0x57c>)
 80009ee:	f000 fc3d 	bl	800126c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 80009f2:	f000 fb37 	bl	8001064 <ssd1306_UpdateScreen>
 80009f6:	e022      	b.n	8000a3e <main+0x4ba>

		  }else
		  {
			  //This is the start screen
			  ssd1306_Fill(Black);//filled
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fb0f 	bl	800101c <ssd1306_Fill>
			  ssd1306_SetCursor(10, 11);
 80009fe:	210b      	movs	r1, #11
 8000a00:	200a      	movs	r0, #10
 8000a02:	f000 fc59 	bl	80012b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("BOUNCE!", Font_16x26, White);
 8000a06:	4a3f      	ldr	r2, [pc, #252]	; (8000b04 <main+0x580>)
 8000a08:	2301      	movs	r3, #1
 8000a0a:	ca06      	ldmia	r2, {r1, r2}
 8000a0c:	483e      	ldr	r0, [pc, #248]	; (8000b08 <main+0x584>)
 8000a0e:	f000 fc2d 	bl	800126c <ssd1306_WriteString>
			  ssd1306_SetCursor(31, 40);
 8000a12:	2128      	movs	r1, #40	; 0x28
 8000a14:	201f      	movs	r0, #31
 8000a16:	f000 fc4f 	bl	80012b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("Press START", Font_6x8, White);
 8000a1a:	4a38      	ldr	r2, [pc, #224]	; (8000afc <main+0x578>)
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	ca06      	ldmia	r2, {r1, r2}
 8000a20:	4837      	ldr	r0, [pc, #220]	; (8000b00 <main+0x57c>)
 8000a22:	f000 fc23 	bl	800126c <ssd1306_WriteString>
			  ssd1306_SetCursor(13, 55);
 8000a26:	2137      	movs	r1, #55	; 0x37
 8000a28:	200d      	movs	r0, #13
 8000a2a:	f000 fc45 	bl	80012b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("BY: ISAAC MOREIRA", Font_6x8, White);
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <main+0x578>)
 8000a30:	2301      	movs	r3, #1
 8000a32:	ca06      	ldmia	r2, {r1, r2}
 8000a34:	4835      	ldr	r0, [pc, #212]	; (8000b0c <main+0x588>)
 8000a36:	f000 fc19 	bl	800126c <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8000a3a:	f000 fb13 	bl	8001064 <ssd1306_UpdateScreen>
		  }
		  if(0 == HAL_GPIO_ReadPin(GAME_BUTTON_GPIO_Port, GAME_BUTTON_Pin))// Reads the Start Button input
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	4833      	ldr	r0, [pc, #204]	; (8000b10 <main+0x58c>)
 8000a44:	f001 fe86 	bl	8002754 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d11d      	bne.n	8000a8a <main+0x506>
			                                                               // Here we don't make any debouncing. In this case, it isn't needed
		  {
		 	   InGame = 1;//Flag that the game has started
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <main+0x540>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
		 	   GameStarted = 1; //We have played at least once
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <main+0x554>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
		 	   StartTime = HAL_GetTick();// Gets the time the game started
 8000a5a:	f000 ff65 	bl	8001928 <HAL_GetTick>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <main+0x544>)
 8000a64:	601a      	str	r2, [r3, #0]
		 	   Ypos = edgeOffset; //Puts the ball at the left top corner
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <main+0x538>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	701a      	strb	r2, [r3, #0]
		 	   Xpos = edgeOffset;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <main+0x520>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	701a      	strb	r2, [r3, #0]
		 	   PaddleInteractions = 0; //There has been no interactions with the paddle
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <main+0x530>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
		 	   RefreshPeriod = MaxRefreshPeriod; //The game starts slow
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <main+0x534>)
 8000a7a:	2232      	movs	r2, #50	; 0x32
 8000a7c:	601a      	str	r2, [r3, #0]
		 	   Xvelocity = 3;//We reset the velocity components
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <main+0x52c>)
 8000a80:	2203      	movs	r2, #3
 8000a82:	701a      	strb	r2, [r3, #0]
		 	   Yvelocity = 2;//
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <main+0x528>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	701a      	strb	r2, [r3, #0]
		   }

	  }

	  RefreshPeriod = (RefreshPeriod < 10)? 10 : RefreshPeriod;//Makes sure that the game doesn't run too fast
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <main+0x534>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	bfb8      	it	lt
 8000a92:	230a      	movlt	r3, #10
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <main+0x534>)
 8000a96:	6013      	str	r3, [r2, #0]
	  HAL_Delay(RefreshPeriod);//Dictates the frame rate of the game
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <main+0x534>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 ff4f 	bl	8001940 <HAL_Delay>
	  if(GameStarted && InGame )//If the game has ever started and the player is playing
 8000aa2:	e580      	b.n	80005a6 <main+0x22>
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	200001a0 	.word	0x200001a0
 8000aac:	20000003 	.word	0x20000003
 8000ab0:	20000002 	.word	0x20000002
 8000ab4:	200001b0 	.word	0x200001b0
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000001 	.word	0x20000001
 8000ac0:	20000005 	.word	0x20000005
 8000ac4:	2000019d 	.word	0x2000019d
 8000ac8:	200001a4 	.word	0x200001a4
 8000acc:	10624dd3 	.word	0x10624dd3
 8000ad0:	200001a8 	.word	0x200001a8
 8000ad4:	200001b4 	.word	0x200001b4
 8000ad8:	2000019e 	.word	0x2000019e
 8000adc:	2000001c 	.word	0x2000001c
 8000ae0:	08004d20 	.word	0x08004d20
 8000ae4:	200001b8 	.word	0x200001b8
 8000ae8:	08004d2c 	.word	0x08004d2c
 8000aec:	200001e4 	.word	0x200001e4
 8000af0:	20000014 	.word	0x20000014
 8000af4:	08004d08 	.word	0x08004d08
 8000af8:	200001d0 	.word	0x200001d0
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	08004d3c 	.word	0x08004d3c
 8000b04:	20000024 	.word	0x20000024
 8000b08:	08004d48 	.word	0x08004d48
 8000b0c:	08004d50 	.word	0x08004d50
 8000b10:	40020400 	.word	0x40020400

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fc7c 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b84:	2310      	movs	r3, #16
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000b88:	23c8      	movs	r3, #200	; 0xc8
 8000b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fe0d 	bl	80027b8 <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ba4:	f000 f966 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
 8000baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 f86f 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bd0:	f000 f950 	bl	8000e74 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3750      	adds	r7, #80	; 0x50
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40007000 	.word	0x40007000

08000be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <MX_ADC1_Init+0x9c>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_ADC1_Init+0xa0>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c46:	f000 fe9f 	bl	8001988 <HAL_ADC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c50:	f000 f910 	bl	8000e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c66:	f001 f81f 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c70:	f000 f900 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b8 	.word	0x200000b8
 8000c80:	40012000 	.word	0x40012000
 8000c84:	0f000001 	.word	0x0f000001

08000c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <MX_SPI1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI1_Init+0x64>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_SPI1_Init+0x64>)
 8000cda:	f002 f9c5 	bl	8003068 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f000 f8c6 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000100 	.word	0x20000100
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f002 fc2c 	bl	8003588 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f89d 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000158 	.word	0x20000158
 8000d44:	40011000 	.word	0x40011000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a40      	ldr	r2, [pc, #256]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a39      	ldr	r2, [pc, #228]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a32      	ldr	r2, [pc, #200]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_GPIO_Init+0x120>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	4826      	ldr	r0, [pc, #152]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000dd4:	f001 fcd6 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_GPIO_Init+0x128>)
 8000dec:	f001 fb2e 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8000df0:	2307      	movs	r3, #7
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000e08:	f001 fb20 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_SCL_Pin B7_SDA_Pin */
  GPIO_InitStruct.Pin = B6_SCL_Pin|B7_SDA_Pin;
 8000e0c:	23c0      	movs	r3, #192	; 0xc0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000e28:	f001 fb10 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : B8_Pin */
  GPIO_InitStruct.Pin = B8_Pin;
 8000e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B8_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000e42:	f001 fb03 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_Pin;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAME_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000e5c:	f001 faf6 	bl	800244c <HAL_GPIO_Init>

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020000 	.word	0x40020000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2104      	movs	r1, #4
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <ssd1306_Reset+0x34>)
 8000e8a:	f001 fc7b 	bl	8002784 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2101      	movs	r1, #1
 8000e92:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <ssd1306_Reset+0x34>)
 8000e94:	f001 fc76 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fd51 	bl	8001940 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <ssd1306_Reset+0x34>)
 8000ea4:	f001 fc6e 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f000 fd49 	bl	8001940 <HAL_Delay>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400

08000eb8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <ssd1306_WriteCommand+0x40>)
 8000ec8:	f001 fc5c 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <ssd1306_WriteCommand+0x40>)
 8000ed2:	f001 fc57 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000ed6:	1df9      	adds	r1, r7, #7
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	2201      	movs	r2, #1
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <ssd1306_WriteCommand+0x44>)
 8000ee0:	f002 f94b 	bl	800317a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <ssd1306_WriteCommand+0x40>)
 8000eea:	f001 fc4b 	bl	8002784 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	20000100 	.word	0x20000100

08000f00 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <ssd1306_WriteData+0x40>)
 8000f10:	f001 fc38 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <ssd1306_WriteData+0x40>)
 8000f1a:	f001 fc33 	bl	8002784 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <ssd1306_WriteData+0x44>)
 8000f2a:	f002 f926 	bl	800317a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2104      	movs	r1, #4
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ssd1306_WriteData+0x40>)
 8000f34:	f001 fc26 	bl	8002784 <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20000100 	.word	0x20000100

08000f48 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f4c:	f7ff ff98 	bl	8000e80 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f000 fcf5 	bl	8001940 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 fab8 	bl	80014cc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f5c:	2020      	movs	r0, #32
 8000f5e:	f7ff ffab 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ffa8 	bl	8000eb8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f68:	20b0      	movs	r0, #176	; 0xb0
 8000f6a:	f7ff ffa5 	bl	8000eb8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f6e:	20c8      	movs	r0, #200	; 0xc8
 8000f70:	f7ff ffa2 	bl	8000eb8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ff9f 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff9c 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f80:	2040      	movs	r0, #64	; 0x40
 8000f82:	f7ff ff99 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f86:	20ff      	movs	r0, #255	; 0xff
 8000f88:	f000 fa8d 	bl	80014a6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f8c:	20a1      	movs	r0, #161	; 0xa1
 8000f8e:	f7ff ff93 	bl	8000eb8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f92:	20a6      	movs	r0, #166	; 0xa6
 8000f94:	f7ff ff90 	bl	8000eb8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f98:	20a8      	movs	r0, #168	; 0xa8
 8000f9a:	f7ff ff8d 	bl	8000eb8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f9e:	203f      	movs	r0, #63	; 0x3f
 8000fa0:	f7ff ff8a 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fa4:	20a4      	movs	r0, #164	; 0xa4
 8000fa6:	f7ff ff87 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000faa:	20d3      	movs	r0, #211	; 0xd3
 8000fac:	f7ff ff84 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ff81 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fb6:	20d5      	movs	r0, #213	; 0xd5
 8000fb8:	f7ff ff7e 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fbc:	20f0      	movs	r0, #240	; 0xf0
 8000fbe:	f7ff ff7b 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fc2:	20d9      	movs	r0, #217	; 0xd9
 8000fc4:	f7ff ff78 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fc8:	2022      	movs	r0, #34	; 0x22
 8000fca:	f7ff ff75 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fce:	20da      	movs	r0, #218	; 0xda
 8000fd0:	f7ff ff72 	bl	8000eb8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fd4:	2012      	movs	r0, #18
 8000fd6:	f7ff ff6f 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fda:	20db      	movs	r0, #219	; 0xdb
 8000fdc:	f7ff ff6c 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fe0:	2020      	movs	r0, #32
 8000fe2:	f7ff ff69 	bl	8000eb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fe6:	208d      	movs	r0, #141	; 0x8d
 8000fe8:	f7ff ff66 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fec:	2014      	movs	r0, #20
 8000fee:	f7ff ff63 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 fa6a 	bl	80014cc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f80f 	bl	800101c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ffe:	f000 f831 	bl	8001064 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <ssd1306_Init+0xd0>)
 8001004:	2200      	movs	r2, #0
 8001006:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <ssd1306_Init+0xd0>)
 800100a:	2200      	movs	r2, #0
 800100c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800100e:	4b02      	ldr	r3, [pc, #8]	; (8001018 <ssd1306_Init+0xd0>)
 8001010:	2201      	movs	r2, #1
 8001012:	711a      	strb	r2, [r3, #4]
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000604 	.word	0x20000604

0800101c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e00d      	b.n	8001048 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <ssd1306_Fill+0x1a>
 8001032:	2100      	movs	r1, #0
 8001034:	e000      	b.n	8001038 <ssd1306_Fill+0x1c>
 8001036:	21ff      	movs	r1, #255	; 0xff
 8001038:	4a09      	ldr	r2, [pc, #36]	; (8001060 <ssd1306_Fill+0x44>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	460a      	mov	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104e:	d3ed      	bcc.n	800102c <ssd1306_Fill+0x10>
    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000204 	.word	0x20000204

08001064 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e016      	b.n	800109e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	3b50      	subs	r3, #80	; 0x50
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff1e 	bl	8000eb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ff1b 	bl	8000eb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001082:	2010      	movs	r0, #16
 8001084:	f7ff ff18 	bl	8000eb8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <ssd1306_UpdateScreen+0x4c>)
 800108e:	4413      	add	r3, r2
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff34 	bl	8000f00 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3301      	adds	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d9e5      	bls.n	8001070 <ssd1306_UpdateScreen+0xc>
    }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000204 	.word	0x20000204

080010b4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db3d      	blt.n	800114a <ssd1306_DrawPixel+0x96>
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	2b3f      	cmp	r3, #63	; 0x3f
 80010d2:	d83a      	bhi.n	800114a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010d4:	797b      	ldrb	r3, [r7, #5]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11a      	bne.n	8001110 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	b2d8      	uxtb	r0, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	01db      	lsls	r3, r3, #7
 80010e6:	4413      	add	r3, r2
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <ssd1306_DrawPixel+0xa4>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b259      	sxtb	r1, r3
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4603      	mov	r3, r0
 8001104:	01db      	lsls	r3, r3, #7
 8001106:	4413      	add	r3, r2
 8001108:	b2c9      	uxtb	r1, r1
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <ssd1306_DrawPixel+0xa4>)
 800110c:	54d1      	strb	r1, [r2, r3]
 800110e:	e01d      	b.n	800114c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	b2d8      	uxtb	r0, r3
 8001118:	4603      	mov	r3, r0
 800111a:	01db      	lsls	r3, r3, #7
 800111c:	4413      	add	r3, r2
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <ssd1306_DrawPixel+0xa4>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	b25a      	sxtb	r2, r3
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	b25b      	sxtb	r3, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	b25b      	sxtb	r3, r3
 8001136:	4013      	ands	r3, r2
 8001138:	b259      	sxtb	r1, r3
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	4603      	mov	r3, r0
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4413      	add	r3, r2
 8001142:	b2c9      	uxtb	r1, r1
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <ssd1306_DrawPixel+0xa4>)
 8001146:	54d1      	strb	r1, [r2, r3]
 8001148:	e000      	b.n	800114c <ssd1306_DrawPixel+0x98>
        return;
 800114a:	bf00      	nop
    }
}
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000204 	.word	0x20000204

0800115c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4604      	mov	r4, r0
 8001164:	1d38      	adds	r0, r7, #4
 8001166:	e880 0006 	stmia.w	r0, {r1, r2}
 800116a:	461a      	mov	r2, r3
 800116c:	4623      	mov	r3, r4
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	4613      	mov	r3, r2
 8001172:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b1f      	cmp	r3, #31
 8001178:	d902      	bls.n	8001180 <ssd1306_WriteChar+0x24>
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b7e      	cmp	r3, #126	; 0x7e
 800117e:	d901      	bls.n	8001184 <ssd1306_WriteChar+0x28>
        return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e06d      	b.n	8001260 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <ssd1306_WriteChar+0x10c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	2b80      	cmp	r3, #128	; 0x80
 8001190:	dc06      	bgt.n	80011a0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <ssd1306_WriteChar+0x10c>)
 8001194:	885b      	ldrh	r3, [r3, #2]
 8001196:	461a      	mov	r2, r3
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	dd01      	ble.n	80011a4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e05d      	b.n	8001260 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	e04c      	b.n	8001244 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3b20      	subs	r3, #32
 80011b0:	7979      	ldrb	r1, [r7, #5]
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	440b      	add	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	e034      	b.n	8001234 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <ssd1306_WriteChar+0x10c>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <ssd1306_WriteChar+0x10c>)
 80011ea:	885b      	ldrh	r3, [r3, #2]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	7bba      	ldrb	r2, [r7, #14]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff ff5b 	bl	80010b4 <ssd1306_DrawPixel>
 80011fe:	e016      	b.n	800122e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <ssd1306_WriteChar+0x10c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b2d8      	uxtb	r0, r3
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <ssd1306_WriteChar+0x10c>)
 8001210:	885b      	ldrh	r3, [r3, #2]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	b2d9      	uxtb	r1, r3
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	f7ff ff43 	bl	80010b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	3301      	adds	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	793b      	ldrb	r3, [r7, #4]
 8001236:	461a      	mov	r2, r3
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	4293      	cmp	r3, r2
 800123c:	d3c5      	bcc.n	80011ca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	797b      	ldrb	r3, [r7, #5]
 8001246:	461a      	mov	r2, r3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4293      	cmp	r3, r2
 800124c:	d3ad      	bcc.n	80011aa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <ssd1306_WriteChar+0x10c>)
 8001250:	881a      	ldrh	r2, [r3, #0]
 8001252:	793b      	ldrb	r3, [r7, #4]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <ssd1306_WriteChar+0x10c>)
 800125c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3724      	adds	r7, #36	; 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	20000604 	.word	0x20000604

0800126c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	1d38      	adds	r0, r7, #4
 8001276:	e880 0006 	stmia.w	r0, {r1, r2}
 800127a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800127c:	e012      	b.n	80012a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	7818      	ldrb	r0, [r3, #0]
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	1d3a      	adds	r2, r7, #4
 8001286:	ca06      	ldmia	r2, {r1, r2}
 8001288:	f7ff ff68 	bl	800115c <ssd1306_WriteChar>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d002      	beq.n	800129e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	e008      	b.n	80012b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e8      	bne.n	800127e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <ssd1306_SetCursor+0x2c>)
 80012ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <ssd1306_SetCursor+0x2c>)
 80012d6:	805a      	strh	r2, [r3, #2]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000604 	.word	0x20000604

080012e8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001306:	797a      	ldrb	r2, [r7, #5]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	bfb8      	it	lt
 8001310:	425b      	neglt	r3, r3
 8001312:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001314:	793a      	ldrb	r2, [r7, #4]
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	bfb8      	it	lt
 800131e:	425b      	neglt	r3, r3
 8001320:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	429a      	cmp	r2, r3
 8001328:	d201      	bcs.n	800132e <ssd1306_Line+0x46>
 800132a:	2301      	movs	r3, #1
 800132c:	e001      	b.n	8001332 <ssd1306_Line+0x4a>
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d201      	bcs.n	8001340 <ssd1306_Line+0x58>
 800133c:	2301      	movs	r3, #1
 800133e:	e001      	b.n	8001344 <ssd1306_Line+0x5c>
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800134e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001352:	7939      	ldrb	r1, [r7, #4]
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff feac 	bl	80010b4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800135c:	e024      	b.n	80013a8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800135e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001362:	79b9      	ldrb	r1, [r7, #6]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fea4 	bl	80010b4 <ssd1306_DrawPixel>
        error2 = error * 2;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	425b      	negs	r3, r3
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	429a      	cmp	r2, r3
 800137a:	dd08      	ble.n	800138e <ssd1306_Line+0xa6>
            error -= deltaY;
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4413      	add	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	429a      	cmp	r2, r3
 8001394:	da08      	bge.n	80013a8 <ssd1306_Line+0xc0>
            error += deltaX;
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	4413      	add	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	797b      	ldrb	r3, [r7, #5]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1d6      	bne.n	800135e <ssd1306_Line+0x76>
 80013b0:	79ba      	ldrb	r2, [r7, #6]
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1d2      	bne.n	800135e <ssd1306_Line+0x76>
        }
    }
    return;
 80013b8:	bf00      	nop
}
 80013ba:	3724      	adds	r7, #36	; 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <ssd1306_FillCircle>:

    return;
}

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	4603      	mov	r3, r0
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	460b      	mov	r3, r1
 80013d8:	717b      	strb	r3, [r7, #5]
 80013da:	4613      	mov	r3, r2
 80013dc:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	425b      	negs	r3, r3
 80013e2:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	f1c3 0301 	rsb	r3, r3, #1
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db51      	blt.n	800149e <ssd1306_FillCircle+0xde>
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2b3f      	cmp	r3, #63	; 0x3f
 80013fe:	d84e      	bhi.n	800149e <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	4413      	add	r3, r2
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e017      	b.n	800143c <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e008      	b.n	800142a <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001418:	793a      	ldrb	r2, [r7, #4]
 800141a:	7bf9      	ldrb	r1, [r7, #15]
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe48 	bl	80010b4 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3b01      	subs	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	79f9      	ldrb	r1, [r7, #7]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	440b      	add	r3, r1
 8001432:	429a      	cmp	r2, r3
 8001434:	daf0      	bge.n	8001418 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3b01      	subs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	79b9      	ldrb	r1, [r7, #6]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1acb      	subs	r3, r1, r3
 8001444:	429a      	cmp	r2, r3
 8001446:	dae1      	bge.n	800140c <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	429a      	cmp	r2, r3
 8001452:	dc13      	bgt.n	800147c <ssd1306_FillCircle+0xbc>
            y++;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	3301      	adds	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	3301      	adds	r3, #1
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4413      	add	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	425b      	negs	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	429a      	cmp	r2, r3
 800146e:	d105      	bne.n	800147c <ssd1306_FillCircle+0xbc>
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	429a      	cmp	r2, r3
 8001476:	dc01      	bgt.n	800147c <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	dd08      	ble.n	8001496 <ssd1306_FillCircle+0xd6>
            x++;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	3301      	adds	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	3301      	adds	r3, #1
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	ddb1      	ble.n	8001400 <ssd1306_FillCircle+0x40>

    return;
 800149c:	e000      	b.n	80014a0 <ssd1306_FillCircle+0xe0>
        return;
 800149e:	bf00      	nop
}
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80014b0:	2381      	movs	r3, #129	; 0x81
 80014b2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fcfe 	bl	8000eb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fcfa 	bl	8000eb8 <ssd1306_WriteCommand>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80014dc:	23af      	movs	r3, #175	; 0xaf
 80014de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <ssd1306_SetDisplayOn+0x38>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	715a      	strb	r2, [r3, #5]
 80014e6:	e004      	b.n	80014f2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80014e8:	23ae      	movs	r3, #174	; 0xae
 80014ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <ssd1306_SetDisplayOn+0x38>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcdf 	bl	8000eb8 <ssd1306_WriteCommand>
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000604 	.word	0x20000604

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_ADC_MspInit+0x7c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d127      	bne.n	80015ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_ADC_MspInit+0x80>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = POT1_Pin;
 80015b2:	2302      	movs	r3, #2
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_ADC_MspInit+0x84>)
 80015c6:	f000 ff41 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012000 	.word	0x40012000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_SPI_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_SPI_MspInit+0x88>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_SPI_MspInit+0x88>)
 800160c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_SPI_MspInit+0x88>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_SPI_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_SPI_MspInit+0x88>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_SPI_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800163a:	23a0      	movs	r3, #160	; 0xa0
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164a:	2305      	movs	r3, #5
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_SPI_MspInit+0x8c>)
 8001656:	f000 fef9 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40013000 	.word	0x40013000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_UART_MspInit+0x94>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d134      	bne.n	80016fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_UART_MspInit+0x98>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_UART_MspInit+0x98>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x98>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0x98>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_UART_MspInit+0x98>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_UART_MspInit+0x98>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_UART_MspInit+0x9c>)
 80016e8:	f000 feb0 	bl	800244c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2025      	movs	r0, #37	; 0x25
 80016f2:	f000 fde2 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f6:	2025      	movs	r0, #37	; 0x25
 80016f8:	f000 fdfb 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40011000 	.word	0x40011000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f8d0 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART1_IRQHandler+0x10>)
 800176a:	f001 ff5b 	bl	8003624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000158 	.word	0x20000158

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f002 fe02 	bl	80043b0 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	2000060c 	.word	0x2000060c
 80017e0:	20000628 	.word	0x20000628

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd7 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f002 fdc1 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7fe fea3 	bl	8000584 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800184c:	08007bc4 	.word	0x08007bc4
  ldr r2, =_sbss
 8001850:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001854:	20000624 	.word	0x20000624

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fd0d 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	200f      	movs	r0, #15
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fe3a 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd25 	bl	800230e <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fced 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000002c 	.word	0x2000002c
 80018f8:	20000034 	.word	0x20000034
 80018fc:	20000030 	.word	0x20000030

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000034 	.word	0x20000034
 8001924:	20000610 	.word	0x20000610

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000610 	.word	0x20000610

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000034 	.word	0x20000034

08001988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e033      	b.n	8001a06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fdd6 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ce:	f023 0302 	bic.w	r3, r3, #2
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fa96 	bl	8001f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Start+0x1a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e097      	b.n	8001b5a <HAL_ADC_Start+0x14a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d018      	beq.n	8001a72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HAL_ADC_Start+0x158>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a45      	ldr	r2, [pc, #276]	; (8001b6c <HAL_ADC_Start+0x15c>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9a      	lsrs	r2, r3, #18
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d15f      	bne.n	8001b40 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f023 0206 	bic.w	r2, r3, #6
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
 8001acc:	e002      	b.n	8001ad4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_ADC_Start+0x160>)
 8001ade:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ae8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d129      	bne.n	8001b58 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e020      	b.n	8001b58 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_ADC_Start+0x164>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d11b      	bne.n	8001b58 <HAL_ADC_Start+0x148>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d114      	bne.n	8001b58 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	e00b      	b.n	8001b58 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0210 	orr.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000002c 	.word	0x2000002c
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	40012300 	.word	0x40012300
 8001b74:	40012000 	.word	0x40012000

08001b78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d113      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba4:	d10b      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e063      	b.n	8001c86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bbe:	f7ff feb3 	bl	8001928 <HAL_GetTick>
 8001bc2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc4:	e021      	b.n	8001c0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d01d      	beq.n	8001c0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_ADC_PollForConversion+0x6c>
 8001bd4:	f7ff fea8 	bl	8001928 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d212      	bcs.n	8001c0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d00b      	beq.n	8001c0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0204 	orr.w	r2, r3, #4
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e03d      	b.n	8001c86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d1d6      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0212 	mvn.w	r2, #18
 8001c20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d123      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x1c>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e113      	b.n	8001eec <HAL_ADC_ConfigChannel+0x244>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b09      	cmp	r3, #9
 8001cd2:	d925      	bls.n	8001d20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68d9      	ldr	r1, [r3, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b1e      	subs	r3, #30
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68d9      	ldr	r1, [r3, #12]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4403      	add	r3, r0
 8001d12:	3b1e      	subs	r3, #30
 8001d14:	409a      	lsls	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	e022      	b.n	8001d66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6919      	ldr	r1, [r3, #16]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	2207      	movs	r2, #7
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	400a      	ands	r2, r1
 8001d42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6919      	ldr	r1, [r3, #16]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4403      	add	r3, r0
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d824      	bhi.n	8001db8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b05      	subs	r3, #5
 8001d80:	221f      	movs	r2, #31
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	3b05      	subs	r3, #5
 8001daa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
 8001db6:	e04c      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d824      	bhi.n	8001e0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b23      	subs	r3, #35	; 0x23
 8001dd2:	221f      	movs	r2, #31
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	400a      	ands	r2, r1
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b23      	subs	r3, #35	; 0x23
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
 8001e08:	e023      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b41      	subs	r3, #65	; 0x41
 8001e1c:	221f      	movs	r2, #31
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	400a      	ands	r2, r1
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b41      	subs	r3, #65	; 0x41
 8001e46:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_ADC_ConfigChannel+0x250>)
 8001e54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a28      	ldr	r2, [pc, #160]	; (8001efc <HAL_ADC_ConfigChannel+0x254>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10f      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1d8>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	d10b      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_ADC_ConfigChannel+0x254>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12b      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x23a>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_ADC_ConfigChannel+0x258>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x1f4>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b11      	cmp	r3, #17
 8001e9a:	d122      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_ADC_ConfigChannel+0x258>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d111      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_ADC_ConfigChannel+0x25c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_ADC_ConfigChannel+0x260>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9a      	lsrs	r2, r3, #18
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	40012000 	.word	0x40012000
 8001f00:	10000012 	.word	0x10000012
 8001f04:	2000002c 	.word	0x2000002c
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f14:	4b79      	ldr	r3, [pc, #484]	; (80020fc <ADC_Init+0x1f0>)
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	021a      	lsls	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <ADC_Init+0x1f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e00f      	b.n	800200a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0202 	bic.w	r2, r2, #2
 8002018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e1b      	ldrb	r3, [r3, #24]
 8002024:	005a      	lsls	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002046:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	3b01      	subs	r3, #1
 8002064:	035a      	lsls	r2, r3, #13
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e007      	b.n	8002080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	3b01      	subs	r3, #1
 800209c:	051a      	lsls	r2, r3, #20
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020c2:	025a      	lsls	r2, r3, #9
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	029a      	lsls	r2, r3, #10
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40012300 	.word	0x40012300
 8002100:	0f000001 	.word	0x0f000001

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4907      	ldr	r1, [pc, #28]	; (80021a0 <__NVIC_EnableIRQ+0x38>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff29 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff3e 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff31 	bl	8002168 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa2 	bl	8002260 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff faf8 	bl	8001928 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d008      	beq.n	8002358 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e052      	b.n	80023fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0216 	bic.w	r2, r2, #22
 8002366:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002376:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <HAL_DMA_Abort+0x62>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a8:	e013      	b.n	80023d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023aa:	f7ff fabd 	bl	8001928 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d90c      	bls.n	80023d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e015      	b.n	80023fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e4      	bne.n	80023aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00c      	b.n	800243e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2205      	movs	r2, #5
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e159      	b.n	800271c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8148 	bne.w	8002716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	2b02      	cmp	r3, #2
 800249c:	d130      	bne.n	8002500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b03      	cmp	r3, #3
 800250a:	d017      	beq.n	800253c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a2 	beq.w	8002716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_GPIO_Init+0x2e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x2ec>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_GPIO_Init+0x2f0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x202>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2f4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x1fe>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x2f8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x1fa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_GPIO_Init+0x2fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x1f6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_GPIO_Init+0x300>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x1f2>
 800263a:	2304      	movs	r3, #4
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800263e:	2307      	movs	r3, #7
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264e:	2300      	movs	r3, #0
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	; (8002738 <HAL_GPIO_Init+0x2ec>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x304>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x304>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	f67f aea2 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e267      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b82      	ldr	r3, [pc, #520]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e242      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff f85a 	bl	8001928 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f856 	bl	8001928 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e207      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff f846 	bl	8001928 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff f842 	bl	8001928 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1f3      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c7      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fffb 	bl	8001928 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fff7 	bl	8001928 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a8      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4925      	ldr	r1, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe ffda 	bl	8001928 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe ffd6 	bl	8001928 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e187      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe ffba 	bl	8001928 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe ffb6 	bl	8001928 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e167      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe ffa3 	bl	8001928 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	e00e      	b.n	8002a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe ff9f 	bl	8001928 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d907      	bls.n	8002a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e150      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ea      	bne.n	80029e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b77      	ldr	r3, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe ff5f 	bl	8001928 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe ff5b 	bl	8001928 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a63      	ldr	r2, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a5e      	ldr	r2, [pc, #376]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002ac4:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe ff20 	bl	8001928 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe ff1c 	bl	8001928 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0cb      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe ff0a 	bl	8001928 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe ff06 	bl	8001928 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b5      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d05c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d141      	bne.n	8002bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe feda 	bl	8001928 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fed6 	bl	8001928 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e087      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe feaf 	bl	8001928 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe feab 	bl	8001928 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e05c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x416>
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fe98 	bl	8001928 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fe94 	bl	8001928 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e045      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e038      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fdc6 	bl	8001928 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fdc2 	bl	8001928 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fd26 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08007b68 	.word	0x08007b68
 8002e6c:	2000002c 	.word	0x2000002c
 8002e70:	20000030 	.word	0x20000030

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b090      	sub	sp, #64	; 0x40
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	2300      	movs	r3, #0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	f200 80a1 	bhi.w	8002fe0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea6:	e09b      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002eac:	e09b      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb2:	e098      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d028      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002edc:	2100      	movs	r1, #0
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee0:	fb03 f201 	mul.w	r2, r3, r1
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	4a43      	ldr	r2, [pc, #268]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8002eee:	fba0 1202 	umull	r1, r2, r0, r2
 8002ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	4413      	add	r3, r2
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	2200      	movs	r2, #0
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	61fa      	str	r2, [r7, #28]
 8002f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f0e:	f7fd f9b7 	bl	8000280 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4613      	mov	r3, r2
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1a:	e053      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1c:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	2200      	movs	r2, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	617a      	str	r2, [r7, #20]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f2e:	f04f 0b00 	mov.w	fp, #0
 8002f32:	4652      	mov	r2, sl
 8002f34:	465b      	mov	r3, fp
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f44:	0150      	lsls	r0, r2, #5
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f66:	ebb2 0408 	subs.w	r4, r2, r8
 8002f6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	00eb      	lsls	r3, r5, #3
 8002f78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7c:	00e2      	lsls	r2, r4, #3
 8002f7e:	4614      	mov	r4, r2
 8002f80:	461d      	mov	r5, r3
 8002f82:	eb14 030a 	adds.w	r3, r4, sl
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	eb45 030b 	adc.w	r3, r5, fp
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	028b      	lsls	r3, r1, #10
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	028a      	lsls	r2, r1, #10
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fb8:	f7fd f962 	bl	8000280 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3740      	adds	r7, #64	; 0x40
 8002fec:	46bd      	mov	sp, r7
 8002fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	017d7840 	.word	0x017d7840

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000002c 	.word	0x2000002c

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	08007b78 	.word	0x08007b78

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003044:	f7ff ffdc 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0b5b      	lsrs	r3, r3, #13
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08007b78 	.word	0x08007b78

08003068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07b      	b.n	8003172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d009      	beq.n	80030a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	e005      	b.n	80030a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fa90 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	ea42 0103 	orr.w	r1, r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0104 	and.w	r1, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f003 0210 	and.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b088      	sub	sp, #32
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_SPI_Transmit+0x22>
 8003198:	2302      	movs	r3, #2
 800319a:	e126      	b.n	80033ea <HAL_SPI_Transmit+0x270>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a4:	f7fe fbc0 	bl	8001928 <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031be:	e10b      	b.n	80033d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Transmit+0x52>
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d0:	e102      	b.n	80033d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	d10f      	bne.n	800323a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d007      	beq.n	8003258 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003260:	d14b      	bne.n	80032fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_SPI_Transmit+0xf6>
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13e      	bne.n	80032ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003294:	e02b      	b.n	80032ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d112      	bne.n	80032ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80032c8:	e011      	b.n	80032ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ca:	f7fe fb2d 	bl	8001928 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d803      	bhi.n	80032e2 <HAL_SPI_Transmit+0x168>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_Transmit+0x16e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032ec:	e074      	b.n	80033d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ce      	bne.n	8003296 <HAL_SPI_Transmit+0x11c>
 80032f8:	e04c      	b.n	8003394 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Transmit+0x18e>
 8003302:	8afb      	ldrh	r3, [r7, #22]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d140      	bne.n	800338a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800332e:	e02c      	b.n	800338a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d113      	bne.n	8003366 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	86da      	strh	r2, [r3, #54]	; 0x36
 8003364:	e011      	b.n	800338a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003366:	f7fe fadf 	bl	8001928 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d803      	bhi.n	800337e <HAL_SPI_Transmit+0x204>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d102      	bne.n	8003384 <HAL_SPI_Transmit+0x20a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003388:	e026      	b.n	80033d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1cd      	bne.n	8003330 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f8b3 	bl	8003504 <SPI_EndRxTxTransaction>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e000      	b.n	80033d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003404:	f7fe fa90 	bl	8001928 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003414:	f7fe fa88 	bl	8001928 <HAL_GetTick>
 8003418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	015b      	lsls	r3, r3, #5
 8003420:	0d1b      	lsrs	r3, r3, #20
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342a:	e054      	b.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d050      	beq.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003434:	f7fe fa78 	bl	8001928 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	429a      	cmp	r2, r3
 8003442:	d902      	bls.n	800344a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d13d      	bne.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d111      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346c:	d004      	beq.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d107      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003490:	d10f      	bne.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e017      	b.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d19b      	bne.n	800342c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000002c 	.word	0x2000002c

08003504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <SPI_EndRxTxTransaction+0x7c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <SPI_EndRxTxTransaction+0x80>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0d5b      	lsrs	r3, r3, #21
 800351c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d112      	bne.n	8003556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ff5a 	bl	80033f4 <SPI_WaitFlagStateUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3b01      	subs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d0f2      	beq.n	8003556 <SPI_EndRxTxTransaction+0x52>
 8003570:	e000      	b.n	8003574 <SPI_EndRxTxTransaction+0x70>
        break;
 8003572:	bf00      	nop
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2000002c 	.word	0x2000002c
 8003584:	165e9f81 	.word	0x165e9f81

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03f      	b.n	800361a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f85e 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fc7b 	bl	8003ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b0ba      	sub	sp, #232	; 0xe8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x66>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb65 	bl	8003d52 <UART_Receive_IT>
      return;
 8003688:	e256      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800368a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80de 	beq.w	8003850 <HAL_UART_IRQHandler+0x22c>
 8003694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80d1 	beq.w	8003850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_UART_IRQHandler+0xae>
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xd2>
 80036de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_UART_IRQHandler+0xf6>
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <HAL_UART_IRQHandler+0x126>
 8003726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 81ed 	beq.w	8003b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_UART_IRQHandler+0x14e>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faf0 	bl	8003d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_UART_IRQHandler+0x17a>
 8003796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04f      	beq.n	800383e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9f8 	bl	8003b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d141      	bne.n	8003836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1d9      	bne.n	80037b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	4a7d      	ldr	r2, [pc, #500]	; (8003a00 <HAL_UART_IRQHandler+0x3dc>)
 800380c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fdf7 	bl	8002406 <HAL_DMA_Abort_IT>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003828:	4610      	mov	r0, r2
 800382a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00e      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f99a 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e00a      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f996 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	e006      	b.n	800384c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f992 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800384a:	e170      	b.n	8003b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	bf00      	nop
    return;
 800384e:	e16e      	b.n	8003b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 814a 	bne.w	8003aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8143 	beq.w	8003aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 813c 	beq.w	8003aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	f040 80b4 	bne.w	8003a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8140 	beq.w	8003b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f080 8139 	bcs.w	8003b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d2:	f000 8088 	beq.w	80039e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800390e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800391a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1d9      	bne.n	80038d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800394a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800394e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e1      	bne.n	8003922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800396e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3314      	adds	r3, #20
 800397e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e3      	bne.n	800395e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	f023 0310 	bic.w	r3, r3, #16
 80039ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e3      	bne.n	80039a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fca0 	bl	8002326 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8c0 	bl	8003b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039fc:	e099      	b.n	8003b32 <HAL_UART_IRQHandler+0x50e>
 80039fe:	bf00      	nop
 8003a00:	08003c5b 	.word	0x08003c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808b 	beq.w	8003b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8086 	beq.w	8003b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	623b      	str	r3, [r7, #32]
   return(result);
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a86:	633a      	str	r2, [r7, #48]	; 0x30
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e3      	bne.n	8003a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e3      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f848 	bl	8003b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aec:	e023      	b.n	8003b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_UART_IRQHandler+0x4ea>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8bb 	bl	8003c82 <UART_Transmit_IT>
    return;
 8003b0c:	e014      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <HAL_UART_IRQHandler+0x514>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8fb 	bl	8003d22 <UART_EndTransmit_IT>
    return;
 8003b2c:	e004      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
    return;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
      return;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_UART_IRQHandler+0x514>
      return;
 8003b36:	bf00      	nop
  }
}
 8003b38:	37e8      	adds	r7, #232	; 0xe8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop

08003b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b095      	sub	sp, #84	; 0x54
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c2c:	61ba      	str	r2, [r7, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	; 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff ff77 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b21      	cmp	r3, #33	; 0x21
 8003c94:	d13e      	bne.n	8003d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d114      	bne.n	8003cca <UART_Transmit_IT+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d110      	bne.n	8003cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	e008      	b.n	8003cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6211      	str	r1, [r2, #32]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10f      	bne.n	8003d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fefc 	bl	8003b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08c      	sub	sp, #48	; 0x30
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b22      	cmp	r3, #34	; 0x22
 8003d64:	f040 80ab 	bne.w	8003ebe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d117      	bne.n	8003da2 <UART_Receive_IT+0x50>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d113      	bne.n	8003da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003da0:	e026      	b.n	8003df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d007      	beq.n	8003dc6 <UART_Receive_IT+0x74>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <UART_Receive_IT+0x82>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e008      	b.n	8003de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d15a      	bne.n	8003eba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0220 	bic.w	r2, r2, #32
 8003e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d135      	bne.n	8003eb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	623a      	str	r2, [r7, #32]
 8003e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	69f9      	ldr	r1, [r7, #28]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d10a      	bne.n	8003ea2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fe67 	bl	8003b7c <HAL_UARTEx_RxEventCallback>
 8003eae:	e002      	b.n	8003eb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fe4f 	bl	8003b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e002      	b.n	8003ec0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b0c0      	sub	sp, #256	; 0x100
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	ea40 0301 	orr.w	r3, r0, r1
 8003ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f20:	f021 010c 	bic.w	r1, r1, #12
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f42:	6999      	ldr	r1, [r3, #24]
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	ea40 0301 	orr.w	r3, r0, r1
 8003f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <UART_SetConfig+0x2cc>)
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d005      	beq.n	8003f68 <UART_SetConfig+0xa0>
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4b8d      	ldr	r3, [pc, #564]	; (8004198 <UART_SetConfig+0x2d0>)
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d104      	bne.n	8003f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7ff f86a 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f70:	e003      	b.n	8003f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f72:	f7ff f851 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8003f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f84:	f040 810c 	bne.w	80041a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	1891      	adds	r1, r2, r2
 8003fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fa2:	415b      	adcs	r3, r3
 8003fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003faa:	4621      	mov	r1, r4
 8003fac:	eb12 0801 	adds.w	r8, r2, r1
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	eb43 0901 	adc.w	r9, r3, r1
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fca:	4690      	mov	r8, r2
 8003fcc:	4699      	mov	r9, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	eb18 0303 	adds.w	r3, r8, r3
 8003fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd8:	462b      	mov	r3, r5
 8003fda:	eb49 0303 	adc.w	r3, r9, r3
 8003fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	18db      	adds	r3, r3, r3
 8003ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	eb42 0303 	adc.w	r3, r2, r3
 8004002:	657b      	str	r3, [r7, #84]	; 0x54
 8004004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800400c:	f7fc f938 	bl	8000280 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <UART_SetConfig+0x2d4>)
 8004016:	fba3 2302 	umull	r2, r3, r3, r2
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	011c      	lsls	r4, r3, #4
 800401e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800402c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	1891      	adds	r1, r2, r2
 8004036:	64b9      	str	r1, [r7, #72]	; 0x48
 8004038:	415b      	adcs	r3, r3
 800403a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800403c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004040:	4641      	mov	r1, r8
 8004042:	eb12 0a01 	adds.w	sl, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb43 0b01 	adc.w	fp, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800405c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004060:	4692      	mov	sl, r2
 8004062:	469b      	mov	fp, r3
 8004064:	4643      	mov	r3, r8
 8004066:	eb1a 0303 	adds.w	r3, sl, r3
 800406a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406e:	464b      	mov	r3, r9
 8004070:	eb4b 0303 	adc.w	r3, fp, r3
 8004074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800408c:	460b      	mov	r3, r1
 800408e:	18db      	adds	r3, r3, r3
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
 8004092:	4613      	mov	r3, r2
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
 800409a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800409e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040a2:	f7fc f8ed 	bl	8000280 <__aeabi_uldivmod>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <UART_SetConfig+0x2d4>)
 80040ae:	fba3 2301 	umull	r2, r3, r3, r1
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2264      	movs	r2, #100	; 0x64
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	1acb      	subs	r3, r1, r3
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <UART_SetConfig+0x2d4>)
 80040c4:	fba3 2302 	umull	r2, r3, r3, r2
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040d0:	441c      	add	r4, r3
 80040d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	1891      	adds	r1, r2, r2
 80040ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80040ec:	415b      	adcs	r3, r3
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f4:	4641      	mov	r1, r8
 80040f6:	1851      	adds	r1, r2, r1
 80040f8:	6339      	str	r1, [r7, #48]	; 0x30
 80040fa:	4649      	mov	r1, r9
 80040fc:	414b      	adcs	r3, r1
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800410c:	4659      	mov	r1, fp
 800410e:	00cb      	lsls	r3, r1, #3
 8004110:	4651      	mov	r1, sl
 8004112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004116:	4651      	mov	r1, sl
 8004118:	00ca      	lsls	r2, r1, #3
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	4603      	mov	r3, r0
 8004120:	4642      	mov	r2, r8
 8004122:	189b      	adds	r3, r3, r2
 8004124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004128:	464b      	mov	r3, r9
 800412a:	460a      	mov	r2, r1
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800415a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800415e:	f7fc f88f 	bl	8000280 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <UART_SetConfig+0x2d4>)
 8004168:	fba3 1302 	umull	r1, r3, r3, r2
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	2164      	movs	r1, #100	; 0x64
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	3332      	adds	r3, #50	; 0x32
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <UART_SetConfig+0x2d4>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	f003 0207 	and.w	r2, r3, #7
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4422      	add	r2, r4
 800418e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004190:	e105      	b.n	800439e <UART_SetConfig+0x4d6>
 8004192:	bf00      	nop
 8004194:	40011000 	.word	0x40011000
 8004198:	40011400 	.word	0x40011400
 800419c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041b2:	4642      	mov	r2, r8
 80041b4:	464b      	mov	r3, r9
 80041b6:	1891      	adds	r1, r2, r2
 80041b8:	6239      	str	r1, [r7, #32]
 80041ba:	415b      	adcs	r3, r3
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041c2:	4641      	mov	r1, r8
 80041c4:	1854      	adds	r4, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb43 0501 	adc.w	r5, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	00eb      	lsls	r3, r5, #3
 80041d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041da:	00e2      	lsls	r2, r4, #3
 80041dc:	4614      	mov	r4, r2
 80041de:	461d      	mov	r5, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	18e3      	adds	r3, r4, r3
 80041e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e8:	464b      	mov	r3, r9
 80041ea:	eb45 0303 	adc.w	r3, r5, r3
 80041ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800420e:	4629      	mov	r1, r5
 8004210:	008b      	lsls	r3, r1, #2
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004218:	4621      	mov	r1, r4
 800421a:	008a      	lsls	r2, r1, #2
 800421c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004220:	f7fc f82e 	bl	8000280 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4b60      	ldr	r3, [pc, #384]	; (80043ac <UART_SetConfig+0x4e4>)
 800422a:	fba3 2302 	umull	r2, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	011c      	lsls	r4, r3, #4
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800423c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	1891      	adds	r1, r2, r2
 800424a:	61b9      	str	r1, [r7, #24]
 800424c:	415b      	adcs	r3, r3
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004254:	4641      	mov	r1, r8
 8004256:	1851      	adds	r1, r2, r1
 8004258:	6139      	str	r1, [r7, #16]
 800425a:	4649      	mov	r1, r9
 800425c:	414b      	adcs	r3, r1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800426c:	4659      	mov	r1, fp
 800426e:	00cb      	lsls	r3, r1, #3
 8004270:	4651      	mov	r1, sl
 8004272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004276:	4651      	mov	r1, sl
 8004278:	00ca      	lsls	r2, r1, #3
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	4603      	mov	r3, r0
 8004280:	4642      	mov	r2, r8
 8004282:	189b      	adds	r3, r3, r2
 8004284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004288:	464b      	mov	r3, r9
 800428a:	460a      	mov	r2, r1
 800428c:	eb42 0303 	adc.w	r3, r2, r3
 8004290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	67bb      	str	r3, [r7, #120]	; 0x78
 800429e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042ac:	4649      	mov	r1, r9
 80042ae:	008b      	lsls	r3, r1, #2
 80042b0:	4641      	mov	r1, r8
 80042b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b6:	4641      	mov	r1, r8
 80042b8:	008a      	lsls	r2, r1, #2
 80042ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042be:	f7fb ffdf 	bl	8000280 <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4b39      	ldr	r3, [pc, #228]	; (80043ac <UART_SetConfig+0x4e4>)
 80042c8:	fba3 1302 	umull	r1, r3, r3, r2
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	2164      	movs	r1, #100	; 0x64
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	3332      	adds	r3, #50	; 0x32
 80042da:	4a34      	ldr	r2, [pc, #208]	; (80043ac <UART_SetConfig+0x4e4>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e6:	441c      	add	r4, r3
 80042e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ec:	2200      	movs	r2, #0
 80042ee:	673b      	str	r3, [r7, #112]	; 0x70
 80042f0:	677a      	str	r2, [r7, #116]	; 0x74
 80042f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	415b      	adcs	r3, r3
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004306:	4641      	mov	r1, r8
 8004308:	1851      	adds	r1, r2, r1
 800430a:	6039      	str	r1, [r7, #0]
 800430c:	4649      	mov	r1, r9
 800430e:	414b      	adcs	r3, r1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800431e:	4659      	mov	r1, fp
 8004320:	00cb      	lsls	r3, r1, #3
 8004322:	4651      	mov	r1, sl
 8004324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004328:	4651      	mov	r1, sl
 800432a:	00ca      	lsls	r2, r1, #3
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	4603      	mov	r3, r0
 8004332:	4642      	mov	r2, r8
 8004334:	189b      	adds	r3, r3, r2
 8004336:	66bb      	str	r3, [r7, #104]	; 0x68
 8004338:	464b      	mov	r3, r9
 800433a:	460a      	mov	r2, r1
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	663b      	str	r3, [r7, #96]	; 0x60
 800434c:	667a      	str	r2, [r7, #100]	; 0x64
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800435a:	4649      	mov	r1, r9
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	4641      	mov	r1, r8
 8004360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004364:	4641      	mov	r1, r8
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800436c:	f7fb ff88 	bl	8000280 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <UART_SetConfig+0x4e4>)
 8004376:	fba3 1302 	umull	r1, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2164      	movs	r1, #100	; 0x64
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <UART_SetConfig+0x4e4>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4422      	add	r2, r4
 800439c:	609a      	str	r2, [r3, #8]
}
 800439e:	bf00      	nop
 80043a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043a4:	46bd      	mov	sp, r7
 80043a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043aa:	bf00      	nop
 80043ac:	51eb851f 	.word	0x51eb851f

080043b0 <__errno>:
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <__errno+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000038 	.word	0x20000038

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4d0d      	ldr	r5, [pc, #52]	; (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2600      	movs	r6, #0
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4d0b      	ldr	r5, [pc, #44]	; (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	; (8004400 <__libc_init_array+0x44>)
 80043d0:	f000 fc8e 	bl	8004cf0 <_init>
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2600      	movs	r6, #0
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	08007bbc 	.word	0x08007bbc
 80043f8:	08007bbc 	.word	0x08007bbc
 80043fc:	08007bbc 	.word	0x08007bbc
 8004400:	08007bc0 	.word	0x08007bc0

08004404 <memcpy>:
 8004404:	440a      	add	r2, r1
 8004406:	4291      	cmp	r1, r2
 8004408:	f100 33ff 	add.w	r3, r0, #4294967295
 800440c:	d100      	bne.n	8004410 <memcpy+0xc>
 800440e:	4770      	bx	lr
 8004410:	b510      	push	{r4, lr}
 8004412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441a:	4291      	cmp	r1, r2
 800441c:	d1f9      	bne.n	8004412 <memcpy+0xe>
 800441e:	bd10      	pop	{r4, pc}

08004420 <memset>:
 8004420:	4402      	add	r2, r0
 8004422:	4603      	mov	r3, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <siprintf>:
 8004430:	b40e      	push	{r1, r2, r3}
 8004432:	b500      	push	{lr}
 8004434:	b09c      	sub	sp, #112	; 0x70
 8004436:	ab1d      	add	r3, sp, #116	; 0x74
 8004438:	9002      	str	r0, [sp, #8]
 800443a:	9006      	str	r0, [sp, #24]
 800443c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004440:	4809      	ldr	r0, [pc, #36]	; (8004468 <siprintf+0x38>)
 8004442:	9107      	str	r1, [sp, #28]
 8004444:	9104      	str	r1, [sp, #16]
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <siprintf+0x3c>)
 8004448:	f853 2b04 	ldr.w	r2, [r3], #4
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	6800      	ldr	r0, [r0, #0]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	a902      	add	r1, sp, #8
 8004454:	f000 f868 	bl	8004528 <_svfiprintf_r>
 8004458:	9b02      	ldr	r3, [sp, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	b01c      	add	sp, #112	; 0x70
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b003      	add	sp, #12
 8004466:	4770      	bx	lr
 8004468:	20000038 	.word	0x20000038
 800446c:	ffff0208 	.word	0xffff0208

08004470 <__ssputs_r>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	688e      	ldr	r6, [r1, #8]
 8004476:	429e      	cmp	r6, r3
 8004478:	4682      	mov	sl, r0
 800447a:	460c      	mov	r4, r1
 800447c:	4690      	mov	r8, r2
 800447e:	461f      	mov	r7, r3
 8004480:	d838      	bhi.n	80044f4 <__ssputs_r+0x84>
 8004482:	898a      	ldrh	r2, [r1, #12]
 8004484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004488:	d032      	beq.n	80044f0 <__ssputs_r+0x80>
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	6909      	ldr	r1, [r1, #16]
 800448e:	eba5 0901 	sub.w	r9, r5, r1
 8004492:	6965      	ldr	r5, [r4, #20]
 8004494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800449c:	3301      	adds	r3, #1
 800449e:	444b      	add	r3, r9
 80044a0:	106d      	asrs	r5, r5, #1
 80044a2:	429d      	cmp	r5, r3
 80044a4:	bf38      	it	cc
 80044a6:	461d      	movcc	r5, r3
 80044a8:	0553      	lsls	r3, r2, #21
 80044aa:	d531      	bpl.n	8004510 <__ssputs_r+0xa0>
 80044ac:	4629      	mov	r1, r5
 80044ae:	f000 fb55 	bl	8004b5c <_malloc_r>
 80044b2:	4606      	mov	r6, r0
 80044b4:	b950      	cbnz	r0, 80044cc <__ssputs_r+0x5c>
 80044b6:	230c      	movs	r3, #12
 80044b8:	f8ca 3000 	str.w	r3, [sl]
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044cc:	6921      	ldr	r1, [r4, #16]
 80044ce:	464a      	mov	r2, r9
 80044d0:	f7ff ff98 	bl	8004404 <memcpy>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	6126      	str	r6, [r4, #16]
 80044e2:	6165      	str	r5, [r4, #20]
 80044e4:	444e      	add	r6, r9
 80044e6:	eba5 0509 	sub.w	r5, r5, r9
 80044ea:	6026      	str	r6, [r4, #0]
 80044ec:	60a5      	str	r5, [r4, #8]
 80044ee:	463e      	mov	r6, r7
 80044f0:	42be      	cmp	r6, r7
 80044f2:	d900      	bls.n	80044f6 <__ssputs_r+0x86>
 80044f4:	463e      	mov	r6, r7
 80044f6:	6820      	ldr	r0, [r4, #0]
 80044f8:	4632      	mov	r2, r6
 80044fa:	4641      	mov	r1, r8
 80044fc:	f000 faa8 	bl	8004a50 <memmove>
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	1b9b      	subs	r3, r3, r6
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	4433      	add	r3, r6
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e7db      	b.n	80044c8 <__ssputs_r+0x58>
 8004510:	462a      	mov	r2, r5
 8004512:	f000 fb97 	bl	8004c44 <_realloc_r>
 8004516:	4606      	mov	r6, r0
 8004518:	2800      	cmp	r0, #0
 800451a:	d1e1      	bne.n	80044e0 <__ssputs_r+0x70>
 800451c:	6921      	ldr	r1, [r4, #16]
 800451e:	4650      	mov	r0, sl
 8004520:	f000 fab0 	bl	8004a84 <_free_r>
 8004524:	e7c7      	b.n	80044b6 <__ssputs_r+0x46>
	...

08004528 <_svfiprintf_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	4698      	mov	r8, r3
 800452e:	898b      	ldrh	r3, [r1, #12]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	b09d      	sub	sp, #116	; 0x74
 8004534:	4607      	mov	r7, r0
 8004536:	460d      	mov	r5, r1
 8004538:	4614      	mov	r4, r2
 800453a:	d50e      	bpl.n	800455a <_svfiprintf_r+0x32>
 800453c:	690b      	ldr	r3, [r1, #16]
 800453e:	b963      	cbnz	r3, 800455a <_svfiprintf_r+0x32>
 8004540:	2140      	movs	r1, #64	; 0x40
 8004542:	f000 fb0b 	bl	8004b5c <_malloc_r>
 8004546:	6028      	str	r0, [r5, #0]
 8004548:	6128      	str	r0, [r5, #16]
 800454a:	b920      	cbnz	r0, 8004556 <_svfiprintf_r+0x2e>
 800454c:	230c      	movs	r3, #12
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e0d1      	b.n	80046fa <_svfiprintf_r+0x1d2>
 8004556:	2340      	movs	r3, #64	; 0x40
 8004558:	616b      	str	r3, [r5, #20]
 800455a:	2300      	movs	r3, #0
 800455c:	9309      	str	r3, [sp, #36]	; 0x24
 800455e:	2320      	movs	r3, #32
 8004560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004564:	f8cd 800c 	str.w	r8, [sp, #12]
 8004568:	2330      	movs	r3, #48	; 0x30
 800456a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004714 <_svfiprintf_r+0x1ec>
 800456e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004572:	f04f 0901 	mov.w	r9, #1
 8004576:	4623      	mov	r3, r4
 8004578:	469a      	mov	sl, r3
 800457a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800457e:	b10a      	cbz	r2, 8004584 <_svfiprintf_r+0x5c>
 8004580:	2a25      	cmp	r2, #37	; 0x25
 8004582:	d1f9      	bne.n	8004578 <_svfiprintf_r+0x50>
 8004584:	ebba 0b04 	subs.w	fp, sl, r4
 8004588:	d00b      	beq.n	80045a2 <_svfiprintf_r+0x7a>
 800458a:	465b      	mov	r3, fp
 800458c:	4622      	mov	r2, r4
 800458e:	4629      	mov	r1, r5
 8004590:	4638      	mov	r0, r7
 8004592:	f7ff ff6d 	bl	8004470 <__ssputs_r>
 8004596:	3001      	adds	r0, #1
 8004598:	f000 80aa 	beq.w	80046f0 <_svfiprintf_r+0x1c8>
 800459c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459e:	445a      	add	r2, fp
 80045a0:	9209      	str	r2, [sp, #36]	; 0x24
 80045a2:	f89a 3000 	ldrb.w	r3, [sl]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80a2 	beq.w	80046f0 <_svfiprintf_r+0x1c8>
 80045ac:	2300      	movs	r3, #0
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b6:	f10a 0a01 	add.w	sl, sl, #1
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	9307      	str	r3, [sp, #28]
 80045be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c2:	931a      	str	r3, [sp, #104]	; 0x68
 80045c4:	4654      	mov	r4, sl
 80045c6:	2205      	movs	r2, #5
 80045c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045cc:	4851      	ldr	r0, [pc, #324]	; (8004714 <_svfiprintf_r+0x1ec>)
 80045ce:	f7fb fe07 	bl	80001e0 <memchr>
 80045d2:	9a04      	ldr	r2, [sp, #16]
 80045d4:	b9d8      	cbnz	r0, 800460e <_svfiprintf_r+0xe6>
 80045d6:	06d0      	lsls	r0, r2, #27
 80045d8:	bf44      	itt	mi
 80045da:	2320      	movmi	r3, #32
 80045dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e0:	0711      	lsls	r1, r2, #28
 80045e2:	bf44      	itt	mi
 80045e4:	232b      	movmi	r3, #43	; 0x2b
 80045e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ea:	f89a 3000 	ldrb.w	r3, [sl]
 80045ee:	2b2a      	cmp	r3, #42	; 0x2a
 80045f0:	d015      	beq.n	800461e <_svfiprintf_r+0xf6>
 80045f2:	9a07      	ldr	r2, [sp, #28]
 80045f4:	4654      	mov	r4, sl
 80045f6:	2000      	movs	r0, #0
 80045f8:	f04f 0c0a 	mov.w	ip, #10
 80045fc:	4621      	mov	r1, r4
 80045fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004602:	3b30      	subs	r3, #48	; 0x30
 8004604:	2b09      	cmp	r3, #9
 8004606:	d94e      	bls.n	80046a6 <_svfiprintf_r+0x17e>
 8004608:	b1b0      	cbz	r0, 8004638 <_svfiprintf_r+0x110>
 800460a:	9207      	str	r2, [sp, #28]
 800460c:	e014      	b.n	8004638 <_svfiprintf_r+0x110>
 800460e:	eba0 0308 	sub.w	r3, r0, r8
 8004612:	fa09 f303 	lsl.w	r3, r9, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	9304      	str	r3, [sp, #16]
 800461a:	46a2      	mov	sl, r4
 800461c:	e7d2      	b.n	80045c4 <_svfiprintf_r+0x9c>
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	1d19      	adds	r1, r3, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	9103      	str	r1, [sp, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfbb      	ittet	lt
 800462a:	425b      	neglt	r3, r3
 800462c:	f042 0202 	orrlt.w	r2, r2, #2
 8004630:	9307      	strge	r3, [sp, #28]
 8004632:	9307      	strlt	r3, [sp, #28]
 8004634:	bfb8      	it	lt
 8004636:	9204      	strlt	r2, [sp, #16]
 8004638:	7823      	ldrb	r3, [r4, #0]
 800463a:	2b2e      	cmp	r3, #46	; 0x2e
 800463c:	d10c      	bne.n	8004658 <_svfiprintf_r+0x130>
 800463e:	7863      	ldrb	r3, [r4, #1]
 8004640:	2b2a      	cmp	r3, #42	; 0x2a
 8004642:	d135      	bne.n	80046b0 <_svfiprintf_r+0x188>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	9203      	str	r2, [sp, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	bfb8      	it	lt
 8004650:	f04f 33ff 	movlt.w	r3, #4294967295
 8004654:	3402      	adds	r4, #2
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004724 <_svfiprintf_r+0x1fc>
 800465c:	7821      	ldrb	r1, [r4, #0]
 800465e:	2203      	movs	r2, #3
 8004660:	4650      	mov	r0, sl
 8004662:	f7fb fdbd 	bl	80001e0 <memchr>
 8004666:	b140      	cbz	r0, 800467a <_svfiprintf_r+0x152>
 8004668:	2340      	movs	r3, #64	; 0x40
 800466a:	eba0 000a 	sub.w	r0, r0, sl
 800466e:	fa03 f000 	lsl.w	r0, r3, r0
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	4303      	orrs	r3, r0
 8004676:	3401      	adds	r4, #1
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467e:	4826      	ldr	r0, [pc, #152]	; (8004718 <_svfiprintf_r+0x1f0>)
 8004680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004684:	2206      	movs	r2, #6
 8004686:	f7fb fdab 	bl	80001e0 <memchr>
 800468a:	2800      	cmp	r0, #0
 800468c:	d038      	beq.n	8004700 <_svfiprintf_r+0x1d8>
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <_svfiprintf_r+0x1f4>)
 8004690:	bb1b      	cbnz	r3, 80046da <_svfiprintf_r+0x1b2>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	3308      	adds	r3, #8
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a0:	4433      	add	r3, r6
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	e767      	b.n	8004576 <_svfiprintf_r+0x4e>
 80046a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046aa:	460c      	mov	r4, r1
 80046ac:	2001      	movs	r0, #1
 80046ae:	e7a5      	b.n	80045fc <_svfiprintf_r+0xd4>
 80046b0:	2300      	movs	r3, #0
 80046b2:	3401      	adds	r4, #1
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 0c0a 	mov.w	ip, #10
 80046bc:	4620      	mov	r0, r4
 80046be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c2:	3a30      	subs	r2, #48	; 0x30
 80046c4:	2a09      	cmp	r2, #9
 80046c6:	d903      	bls.n	80046d0 <_svfiprintf_r+0x1a8>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0c5      	beq.n	8004658 <_svfiprintf_r+0x130>
 80046cc:	9105      	str	r1, [sp, #20]
 80046ce:	e7c3      	b.n	8004658 <_svfiprintf_r+0x130>
 80046d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d4:	4604      	mov	r4, r0
 80046d6:	2301      	movs	r3, #1
 80046d8:	e7f0      	b.n	80046bc <_svfiprintf_r+0x194>
 80046da:	ab03      	add	r3, sp, #12
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	462a      	mov	r2, r5
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <_svfiprintf_r+0x1f8>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	4638      	mov	r0, r7
 80046e6:	f3af 8000 	nop.w
 80046ea:	1c42      	adds	r2, r0, #1
 80046ec:	4606      	mov	r6, r0
 80046ee:	d1d6      	bne.n	800469e <_svfiprintf_r+0x176>
 80046f0:	89ab      	ldrh	r3, [r5, #12]
 80046f2:	065b      	lsls	r3, r3, #25
 80046f4:	f53f af2c 	bmi.w	8004550 <_svfiprintf_r+0x28>
 80046f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046fa:	b01d      	add	sp, #116	; 0x74
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004700:	ab03      	add	r3, sp, #12
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	462a      	mov	r2, r5
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <_svfiprintf_r+0x1f8>)
 8004708:	a904      	add	r1, sp, #16
 800470a:	4638      	mov	r0, r7
 800470c:	f000 f87a 	bl	8004804 <_printf_i>
 8004710:	e7eb      	b.n	80046ea <_svfiprintf_r+0x1c2>
 8004712:	bf00      	nop
 8004714:	08007b80 	.word	0x08007b80
 8004718:	08007b8a 	.word	0x08007b8a
 800471c:	00000000 	.word	0x00000000
 8004720:	08004471 	.word	0x08004471
 8004724:	08007b86 	.word	0x08007b86

08004728 <_printf_common>:
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	4616      	mov	r6, r2
 800472e:	4699      	mov	r9, r3
 8004730:	688a      	ldr	r2, [r1, #8]
 8004732:	690b      	ldr	r3, [r1, #16]
 8004734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004738:	4293      	cmp	r3, r2
 800473a:	bfb8      	it	lt
 800473c:	4613      	movlt	r3, r2
 800473e:	6033      	str	r3, [r6, #0]
 8004740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004744:	4607      	mov	r7, r0
 8004746:	460c      	mov	r4, r1
 8004748:	b10a      	cbz	r2, 800474e <_printf_common+0x26>
 800474a:	3301      	adds	r3, #1
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	0699      	lsls	r1, r3, #26
 8004752:	bf42      	ittt	mi
 8004754:	6833      	ldrmi	r3, [r6, #0]
 8004756:	3302      	addmi	r3, #2
 8004758:	6033      	strmi	r3, [r6, #0]
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	f015 0506 	ands.w	r5, r5, #6
 8004760:	d106      	bne.n	8004770 <_printf_common+0x48>
 8004762:	f104 0a19 	add.w	sl, r4, #25
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	6832      	ldr	r2, [r6, #0]
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	42ab      	cmp	r3, r5
 800476e:	dc26      	bgt.n	80047be <_printf_common+0x96>
 8004770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004774:	1e13      	subs	r3, r2, #0
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	bf18      	it	ne
 800477a:	2301      	movne	r3, #1
 800477c:	0692      	lsls	r2, r2, #26
 800477e:	d42b      	bmi.n	80047d8 <_printf_common+0xb0>
 8004780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004784:	4649      	mov	r1, r9
 8004786:	4638      	mov	r0, r7
 8004788:	47c0      	blx	r8
 800478a:	3001      	adds	r0, #1
 800478c:	d01e      	beq.n	80047cc <_printf_common+0xa4>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	68e5      	ldr	r5, [r4, #12]
 8004792:	6832      	ldr	r2, [r6, #0]
 8004794:	f003 0306 	and.w	r3, r3, #6
 8004798:	2b04      	cmp	r3, #4
 800479a:	bf08      	it	eq
 800479c:	1aad      	subeq	r5, r5, r2
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	6922      	ldr	r2, [r4, #16]
 80047a2:	bf0c      	ite	eq
 80047a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a8:	2500      	movne	r5, #0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bfc4      	itt	gt
 80047ae:	1a9b      	subgt	r3, r3, r2
 80047b0:	18ed      	addgt	r5, r5, r3
 80047b2:	2600      	movs	r6, #0
 80047b4:	341a      	adds	r4, #26
 80047b6:	42b5      	cmp	r5, r6
 80047b8:	d11a      	bne.n	80047f0 <_printf_common+0xc8>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e008      	b.n	80047d0 <_printf_common+0xa8>
 80047be:	2301      	movs	r3, #1
 80047c0:	4652      	mov	r2, sl
 80047c2:	4649      	mov	r1, r9
 80047c4:	4638      	mov	r0, r7
 80047c6:	47c0      	blx	r8
 80047c8:	3001      	adds	r0, #1
 80047ca:	d103      	bne.n	80047d4 <_printf_common+0xac>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d4:	3501      	adds	r5, #1
 80047d6:	e7c6      	b.n	8004766 <_printf_common+0x3e>
 80047d8:	18e1      	adds	r1, r4, r3
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	2030      	movs	r0, #48	; 0x30
 80047de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047e2:	4422      	add	r2, r4
 80047e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ec:	3302      	adds	r3, #2
 80047ee:	e7c7      	b.n	8004780 <_printf_common+0x58>
 80047f0:	2301      	movs	r3, #1
 80047f2:	4622      	mov	r2, r4
 80047f4:	4649      	mov	r1, r9
 80047f6:	4638      	mov	r0, r7
 80047f8:	47c0      	blx	r8
 80047fa:	3001      	adds	r0, #1
 80047fc:	d0e6      	beq.n	80047cc <_printf_common+0xa4>
 80047fe:	3601      	adds	r6, #1
 8004800:	e7d9      	b.n	80047b6 <_printf_common+0x8e>
	...

08004804 <_printf_i>:
 8004804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	7e0f      	ldrb	r7, [r1, #24]
 800480a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800480c:	2f78      	cmp	r7, #120	; 0x78
 800480e:	4691      	mov	r9, r2
 8004810:	4680      	mov	r8, r0
 8004812:	460c      	mov	r4, r1
 8004814:	469a      	mov	sl, r3
 8004816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800481a:	d807      	bhi.n	800482c <_printf_i+0x28>
 800481c:	2f62      	cmp	r7, #98	; 0x62
 800481e:	d80a      	bhi.n	8004836 <_printf_i+0x32>
 8004820:	2f00      	cmp	r7, #0
 8004822:	f000 80d8 	beq.w	80049d6 <_printf_i+0x1d2>
 8004826:	2f58      	cmp	r7, #88	; 0x58
 8004828:	f000 80a3 	beq.w	8004972 <_printf_i+0x16e>
 800482c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004834:	e03a      	b.n	80048ac <_printf_i+0xa8>
 8004836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800483a:	2b15      	cmp	r3, #21
 800483c:	d8f6      	bhi.n	800482c <_printf_i+0x28>
 800483e:	a101      	add	r1, pc, #4	; (adr r1, 8004844 <_printf_i+0x40>)
 8004840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004844:	0800489d 	.word	0x0800489d
 8004848:	080048b1 	.word	0x080048b1
 800484c:	0800482d 	.word	0x0800482d
 8004850:	0800482d 	.word	0x0800482d
 8004854:	0800482d 	.word	0x0800482d
 8004858:	0800482d 	.word	0x0800482d
 800485c:	080048b1 	.word	0x080048b1
 8004860:	0800482d 	.word	0x0800482d
 8004864:	0800482d 	.word	0x0800482d
 8004868:	0800482d 	.word	0x0800482d
 800486c:	0800482d 	.word	0x0800482d
 8004870:	080049bd 	.word	0x080049bd
 8004874:	080048e1 	.word	0x080048e1
 8004878:	0800499f 	.word	0x0800499f
 800487c:	0800482d 	.word	0x0800482d
 8004880:	0800482d 	.word	0x0800482d
 8004884:	080049df 	.word	0x080049df
 8004888:	0800482d 	.word	0x0800482d
 800488c:	080048e1 	.word	0x080048e1
 8004890:	0800482d 	.word	0x0800482d
 8004894:	0800482d 	.word	0x0800482d
 8004898:	080049a7 	.word	0x080049a7
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	602a      	str	r2, [r5, #0]
 80048a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0a3      	b.n	80049f8 <_printf_i+0x1f4>
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	6829      	ldr	r1, [r5, #0]
 80048b4:	0606      	lsls	r6, r0, #24
 80048b6:	f101 0304 	add.w	r3, r1, #4
 80048ba:	d50a      	bpl.n	80048d2 <_printf_i+0xce>
 80048bc:	680e      	ldr	r6, [r1, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	da03      	bge.n	80048cc <_printf_i+0xc8>
 80048c4:	232d      	movs	r3, #45	; 0x2d
 80048c6:	4276      	negs	r6, r6
 80048c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048cc:	485e      	ldr	r0, [pc, #376]	; (8004a48 <_printf_i+0x244>)
 80048ce:	230a      	movs	r3, #10
 80048d0:	e019      	b.n	8004906 <_printf_i+0x102>
 80048d2:	680e      	ldr	r6, [r1, #0]
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048da:	bf18      	it	ne
 80048dc:	b236      	sxthne	r6, r6
 80048de:	e7ef      	b.n	80048c0 <_printf_i+0xbc>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	1d19      	adds	r1, r3, #4
 80048e6:	6029      	str	r1, [r5, #0]
 80048e8:	0601      	lsls	r1, r0, #24
 80048ea:	d501      	bpl.n	80048f0 <_printf_i+0xec>
 80048ec:	681e      	ldr	r6, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <_printf_i+0xf2>
 80048f0:	0646      	lsls	r6, r0, #25
 80048f2:	d5fb      	bpl.n	80048ec <_printf_i+0xe8>
 80048f4:	881e      	ldrh	r6, [r3, #0]
 80048f6:	4854      	ldr	r0, [pc, #336]	; (8004a48 <_printf_i+0x244>)
 80048f8:	2f6f      	cmp	r7, #111	; 0x6f
 80048fa:	bf0c      	ite	eq
 80048fc:	2308      	moveq	r3, #8
 80048fe:	230a      	movne	r3, #10
 8004900:	2100      	movs	r1, #0
 8004902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004906:	6865      	ldr	r5, [r4, #4]
 8004908:	60a5      	str	r5, [r4, #8]
 800490a:	2d00      	cmp	r5, #0
 800490c:	bfa2      	ittt	ge
 800490e:	6821      	ldrge	r1, [r4, #0]
 8004910:	f021 0104 	bicge.w	r1, r1, #4
 8004914:	6021      	strge	r1, [r4, #0]
 8004916:	b90e      	cbnz	r6, 800491c <_printf_i+0x118>
 8004918:	2d00      	cmp	r5, #0
 800491a:	d04d      	beq.n	80049b8 <_printf_i+0x1b4>
 800491c:	4615      	mov	r5, r2
 800491e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004922:	fb03 6711 	mls	r7, r3, r1, r6
 8004926:	5dc7      	ldrb	r7, [r0, r7]
 8004928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800492c:	4637      	mov	r7, r6
 800492e:	42bb      	cmp	r3, r7
 8004930:	460e      	mov	r6, r1
 8004932:	d9f4      	bls.n	800491e <_printf_i+0x11a>
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10b      	bne.n	8004950 <_printf_i+0x14c>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07de      	lsls	r6, r3, #31
 800493c:	d508      	bpl.n	8004950 <_printf_i+0x14c>
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	6861      	ldr	r1, [r4, #4]
 8004942:	4299      	cmp	r1, r3
 8004944:	bfde      	ittt	le
 8004946:	2330      	movle	r3, #48	; 0x30
 8004948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800494c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004950:	1b52      	subs	r2, r2, r5
 8004952:	6122      	str	r2, [r4, #16]
 8004954:	f8cd a000 	str.w	sl, [sp]
 8004958:	464b      	mov	r3, r9
 800495a:	aa03      	add	r2, sp, #12
 800495c:	4621      	mov	r1, r4
 800495e:	4640      	mov	r0, r8
 8004960:	f7ff fee2 	bl	8004728 <_printf_common>
 8004964:	3001      	adds	r0, #1
 8004966:	d14c      	bne.n	8004a02 <_printf_i+0x1fe>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	b004      	add	sp, #16
 800496e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004972:	4835      	ldr	r0, [pc, #212]	; (8004a48 <_printf_i+0x244>)
 8004974:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004978:	6829      	ldr	r1, [r5, #0]
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004980:	6029      	str	r1, [r5, #0]
 8004982:	061d      	lsls	r5, r3, #24
 8004984:	d514      	bpl.n	80049b0 <_printf_i+0x1ac>
 8004986:	07df      	lsls	r7, r3, #31
 8004988:	bf44      	itt	mi
 800498a:	f043 0320 	orrmi.w	r3, r3, #32
 800498e:	6023      	strmi	r3, [r4, #0]
 8004990:	b91e      	cbnz	r6, 800499a <_printf_i+0x196>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	f023 0320 	bic.w	r3, r3, #32
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	2310      	movs	r3, #16
 800499c:	e7b0      	b.n	8004900 <_printf_i+0xfc>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f043 0320 	orr.w	r3, r3, #32
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	2378      	movs	r3, #120	; 0x78
 80049a8:	4828      	ldr	r0, [pc, #160]	; (8004a4c <_printf_i+0x248>)
 80049aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049ae:	e7e3      	b.n	8004978 <_printf_i+0x174>
 80049b0:	0659      	lsls	r1, r3, #25
 80049b2:	bf48      	it	mi
 80049b4:	b2b6      	uxthmi	r6, r6
 80049b6:	e7e6      	b.n	8004986 <_printf_i+0x182>
 80049b8:	4615      	mov	r5, r2
 80049ba:	e7bb      	b.n	8004934 <_printf_i+0x130>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	6826      	ldr	r6, [r4, #0]
 80049c0:	6961      	ldr	r1, [r4, #20]
 80049c2:	1d18      	adds	r0, r3, #4
 80049c4:	6028      	str	r0, [r5, #0]
 80049c6:	0635      	lsls	r5, r6, #24
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	d501      	bpl.n	80049d0 <_printf_i+0x1cc>
 80049cc:	6019      	str	r1, [r3, #0]
 80049ce:	e002      	b.n	80049d6 <_printf_i+0x1d2>
 80049d0:	0670      	lsls	r0, r6, #25
 80049d2:	d5fb      	bpl.n	80049cc <_printf_i+0x1c8>
 80049d4:	8019      	strh	r1, [r3, #0]
 80049d6:	2300      	movs	r3, #0
 80049d8:	6123      	str	r3, [r4, #16]
 80049da:	4615      	mov	r5, r2
 80049dc:	e7ba      	b.n	8004954 <_printf_i+0x150>
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	1d1a      	adds	r2, r3, #4
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	681d      	ldr	r5, [r3, #0]
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	2100      	movs	r1, #0
 80049ea:	4628      	mov	r0, r5
 80049ec:	f7fb fbf8 	bl	80001e0 <memchr>
 80049f0:	b108      	cbz	r0, 80049f6 <_printf_i+0x1f2>
 80049f2:	1b40      	subs	r0, r0, r5
 80049f4:	6060      	str	r0, [r4, #4]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	2300      	movs	r3, #0
 80049fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a00:	e7a8      	b.n	8004954 <_printf_i+0x150>
 8004a02:	6923      	ldr	r3, [r4, #16]
 8004a04:	462a      	mov	r2, r5
 8004a06:	4649      	mov	r1, r9
 8004a08:	4640      	mov	r0, r8
 8004a0a:	47d0      	blx	sl
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d0ab      	beq.n	8004968 <_printf_i+0x164>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	079b      	lsls	r3, r3, #30
 8004a14:	d413      	bmi.n	8004a3e <_printf_i+0x23a>
 8004a16:	68e0      	ldr	r0, [r4, #12]
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	bfb8      	it	lt
 8004a1e:	4618      	movlt	r0, r3
 8004a20:	e7a4      	b.n	800496c <_printf_i+0x168>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4632      	mov	r2, r6
 8004a26:	4649      	mov	r1, r9
 8004a28:	4640      	mov	r0, r8
 8004a2a:	47d0      	blx	sl
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d09b      	beq.n	8004968 <_printf_i+0x164>
 8004a30:	3501      	adds	r5, #1
 8004a32:	68e3      	ldr	r3, [r4, #12]
 8004a34:	9903      	ldr	r1, [sp, #12]
 8004a36:	1a5b      	subs	r3, r3, r1
 8004a38:	42ab      	cmp	r3, r5
 8004a3a:	dcf2      	bgt.n	8004a22 <_printf_i+0x21e>
 8004a3c:	e7eb      	b.n	8004a16 <_printf_i+0x212>
 8004a3e:	2500      	movs	r5, #0
 8004a40:	f104 0619 	add.w	r6, r4, #25
 8004a44:	e7f5      	b.n	8004a32 <_printf_i+0x22e>
 8004a46:	bf00      	nop
 8004a48:	08007b91 	.word	0x08007b91
 8004a4c:	08007ba2 	.word	0x08007ba2

08004a50 <memmove>:
 8004a50:	4288      	cmp	r0, r1
 8004a52:	b510      	push	{r4, lr}
 8004a54:	eb01 0402 	add.w	r4, r1, r2
 8004a58:	d902      	bls.n	8004a60 <memmove+0x10>
 8004a5a:	4284      	cmp	r4, r0
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	d807      	bhi.n	8004a70 <memmove+0x20>
 8004a60:	1e43      	subs	r3, r0, #1
 8004a62:	42a1      	cmp	r1, r4
 8004a64:	d008      	beq.n	8004a78 <memmove+0x28>
 8004a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a6e:	e7f8      	b.n	8004a62 <memmove+0x12>
 8004a70:	4402      	add	r2, r0
 8004a72:	4601      	mov	r1, r0
 8004a74:	428a      	cmp	r2, r1
 8004a76:	d100      	bne.n	8004a7a <memmove+0x2a>
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a82:	e7f7      	b.n	8004a74 <memmove+0x24>

08004a84 <_free_r>:
 8004a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d044      	beq.n	8004b14 <_free_r+0x90>
 8004a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8e:	9001      	str	r0, [sp, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f1a1 0404 	sub.w	r4, r1, #4
 8004a96:	bfb8      	it	lt
 8004a98:	18e4      	addlt	r4, r4, r3
 8004a9a:	f000 f913 	bl	8004cc4 <__malloc_lock>
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <_free_r+0x94>)
 8004aa0:	9801      	ldr	r0, [sp, #4]
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	b933      	cbnz	r3, 8004ab4 <_free_r+0x30>
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	6014      	str	r4, [r2, #0]
 8004aaa:	b003      	add	sp, #12
 8004aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab0:	f000 b90e 	b.w	8004cd0 <__malloc_unlock>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d908      	bls.n	8004aca <_free_r+0x46>
 8004ab8:	6825      	ldr	r5, [r4, #0]
 8004aba:	1961      	adds	r1, r4, r5
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf01      	itttt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	1949      	addeq	r1, r1, r5
 8004ac6:	6021      	streq	r1, [r4, #0]
 8004ac8:	e7ed      	b.n	8004aa6 <_free_r+0x22>
 8004aca:	461a      	mov	r2, r3
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b10b      	cbz	r3, 8004ad4 <_free_r+0x50>
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	d9fa      	bls.n	8004aca <_free_r+0x46>
 8004ad4:	6811      	ldr	r1, [r2, #0]
 8004ad6:	1855      	adds	r5, r2, r1
 8004ad8:	42a5      	cmp	r5, r4
 8004ada:	d10b      	bne.n	8004af4 <_free_r+0x70>
 8004adc:	6824      	ldr	r4, [r4, #0]
 8004ade:	4421      	add	r1, r4
 8004ae0:	1854      	adds	r4, r2, r1
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	d1e0      	bne.n	8004aaa <_free_r+0x26>
 8004ae8:	681c      	ldr	r4, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	6053      	str	r3, [r2, #4]
 8004aee:	4421      	add	r1, r4
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	e7da      	b.n	8004aaa <_free_r+0x26>
 8004af4:	d902      	bls.n	8004afc <_free_r+0x78>
 8004af6:	230c      	movs	r3, #12
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	e7d6      	b.n	8004aaa <_free_r+0x26>
 8004afc:	6825      	ldr	r5, [r4, #0]
 8004afe:	1961      	adds	r1, r4, r5
 8004b00:	428b      	cmp	r3, r1
 8004b02:	bf04      	itt	eq
 8004b04:	6819      	ldreq	r1, [r3, #0]
 8004b06:	685b      	ldreq	r3, [r3, #4]
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	bf04      	itt	eq
 8004b0c:	1949      	addeq	r1, r1, r5
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	6054      	str	r4, [r2, #4]
 8004b12:	e7ca      	b.n	8004aaa <_free_r+0x26>
 8004b14:	b003      	add	sp, #12
 8004b16:	bd30      	pop	{r4, r5, pc}
 8004b18:	20000614 	.word	0x20000614

08004b1c <sbrk_aligned>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4e0e      	ldr	r6, [pc, #56]	; (8004b58 <sbrk_aligned+0x3c>)
 8004b20:	460c      	mov	r4, r1
 8004b22:	6831      	ldr	r1, [r6, #0]
 8004b24:	4605      	mov	r5, r0
 8004b26:	b911      	cbnz	r1, 8004b2e <sbrk_aligned+0x12>
 8004b28:	f000 f8bc 	bl	8004ca4 <_sbrk_r>
 8004b2c:	6030      	str	r0, [r6, #0]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 f8b7 	bl	8004ca4 <_sbrk_r>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d00a      	beq.n	8004b50 <sbrk_aligned+0x34>
 8004b3a:	1cc4      	adds	r4, r0, #3
 8004b3c:	f024 0403 	bic.w	r4, r4, #3
 8004b40:	42a0      	cmp	r0, r4
 8004b42:	d007      	beq.n	8004b54 <sbrk_aligned+0x38>
 8004b44:	1a21      	subs	r1, r4, r0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 f8ac 	bl	8004ca4 <_sbrk_r>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d101      	bne.n	8004b54 <sbrk_aligned+0x38>
 8004b50:	f04f 34ff 	mov.w	r4, #4294967295
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	20000618 	.word	0x20000618

08004b5c <_malloc_r>:
 8004b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	1ccd      	adds	r5, r1, #3
 8004b62:	f025 0503 	bic.w	r5, r5, #3
 8004b66:	3508      	adds	r5, #8
 8004b68:	2d0c      	cmp	r5, #12
 8004b6a:	bf38      	it	cc
 8004b6c:	250c      	movcc	r5, #12
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	4607      	mov	r7, r0
 8004b72:	db01      	blt.n	8004b78 <_malloc_r+0x1c>
 8004b74:	42a9      	cmp	r1, r5
 8004b76:	d905      	bls.n	8004b84 <_malloc_r+0x28>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	4630      	mov	r0, r6
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	4e2e      	ldr	r6, [pc, #184]	; (8004c40 <_malloc_r+0xe4>)
 8004b86:	f000 f89d 	bl	8004cc4 <__malloc_lock>
 8004b8a:	6833      	ldr	r3, [r6, #0]
 8004b8c:	461c      	mov	r4, r3
 8004b8e:	bb34      	cbnz	r4, 8004bde <_malloc_r+0x82>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4638      	mov	r0, r7
 8004b94:	f7ff ffc2 	bl	8004b1c <sbrk_aligned>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	d14d      	bne.n	8004c3a <_malloc_r+0xde>
 8004b9e:	6834      	ldr	r4, [r6, #0]
 8004ba0:	4626      	mov	r6, r4
 8004ba2:	2e00      	cmp	r6, #0
 8004ba4:	d140      	bne.n	8004c28 <_malloc_r+0xcc>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4638      	mov	r0, r7
 8004bac:	eb04 0803 	add.w	r8, r4, r3
 8004bb0:	f000 f878 	bl	8004ca4 <_sbrk_r>
 8004bb4:	4580      	cmp	r8, r0
 8004bb6:	d13a      	bne.n	8004c2e <_malloc_r+0xd2>
 8004bb8:	6821      	ldr	r1, [r4, #0]
 8004bba:	3503      	adds	r5, #3
 8004bbc:	1a6d      	subs	r5, r5, r1
 8004bbe:	f025 0503 	bic.w	r5, r5, #3
 8004bc2:	3508      	adds	r5, #8
 8004bc4:	2d0c      	cmp	r5, #12
 8004bc6:	bf38      	it	cc
 8004bc8:	250c      	movcc	r5, #12
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ffa5 	bl	8004b1c <sbrk_aligned>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d02b      	beq.n	8004c2e <_malloc_r+0xd2>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	442b      	add	r3, r5
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	e00e      	b.n	8004bfc <_malloc_r+0xa0>
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	1b52      	subs	r2, r2, r5
 8004be2:	d41e      	bmi.n	8004c22 <_malloc_r+0xc6>
 8004be4:	2a0b      	cmp	r2, #11
 8004be6:	d916      	bls.n	8004c16 <_malloc_r+0xba>
 8004be8:	1961      	adds	r1, r4, r5
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6025      	str	r5, [r4, #0]
 8004bee:	bf18      	it	ne
 8004bf0:	6059      	strne	r1, [r3, #4]
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	bf08      	it	eq
 8004bf6:	6031      	streq	r1, [r6, #0]
 8004bf8:	5162      	str	r2, [r4, r5]
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	f104 060b 	add.w	r6, r4, #11
 8004c02:	f000 f865 	bl	8004cd0 <__malloc_unlock>
 8004c06:	f026 0607 	bic.w	r6, r6, #7
 8004c0a:	1d23      	adds	r3, r4, #4
 8004c0c:	1af2      	subs	r2, r6, r3
 8004c0e:	d0b6      	beq.n	8004b7e <_malloc_r+0x22>
 8004c10:	1b9b      	subs	r3, r3, r6
 8004c12:	50a3      	str	r3, [r4, r2]
 8004c14:	e7b3      	b.n	8004b7e <_malloc_r+0x22>
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	bf0c      	ite	eq
 8004c1c:	6032      	streq	r2, [r6, #0]
 8004c1e:	605a      	strne	r2, [r3, #4]
 8004c20:	e7ec      	b.n	8004bfc <_malloc_r+0xa0>
 8004c22:	4623      	mov	r3, r4
 8004c24:	6864      	ldr	r4, [r4, #4]
 8004c26:	e7b2      	b.n	8004b8e <_malloc_r+0x32>
 8004c28:	4634      	mov	r4, r6
 8004c2a:	6876      	ldr	r6, [r6, #4]
 8004c2c:	e7b9      	b.n	8004ba2 <_malloc_r+0x46>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	4638      	mov	r0, r7
 8004c34:	f000 f84c 	bl	8004cd0 <__malloc_unlock>
 8004c38:	e7a1      	b.n	8004b7e <_malloc_r+0x22>
 8004c3a:	6025      	str	r5, [r4, #0]
 8004c3c:	e7de      	b.n	8004bfc <_malloc_r+0xa0>
 8004c3e:	bf00      	nop
 8004c40:	20000614 	.word	0x20000614

08004c44 <_realloc_r>:
 8004c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c48:	4680      	mov	r8, r0
 8004c4a:	4614      	mov	r4, r2
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	b921      	cbnz	r1, 8004c5a <_realloc_r+0x16>
 8004c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	4611      	mov	r1, r2
 8004c56:	f7ff bf81 	b.w	8004b5c <_malloc_r>
 8004c5a:	b92a      	cbnz	r2, 8004c68 <_realloc_r+0x24>
 8004c5c:	f7ff ff12 	bl	8004a84 <_free_r>
 8004c60:	4625      	mov	r5, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c68:	f000 f838 	bl	8004cdc <_malloc_usable_size_r>
 8004c6c:	4284      	cmp	r4, r0
 8004c6e:	4607      	mov	r7, r0
 8004c70:	d802      	bhi.n	8004c78 <_realloc_r+0x34>
 8004c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c76:	d812      	bhi.n	8004c9e <_realloc_r+0x5a>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f7ff ff6e 	bl	8004b5c <_malloc_r>
 8004c80:	4605      	mov	r5, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0ed      	beq.n	8004c62 <_realloc_r+0x1e>
 8004c86:	42bc      	cmp	r4, r7
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	bf28      	it	cs
 8004c8e:	463a      	movcs	r2, r7
 8004c90:	f7ff fbb8 	bl	8004404 <memcpy>
 8004c94:	4631      	mov	r1, r6
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fef4 	bl	8004a84 <_free_r>
 8004c9c:	e7e1      	b.n	8004c62 <_realloc_r+0x1e>
 8004c9e:	4635      	mov	r5, r6
 8004ca0:	e7df      	b.n	8004c62 <_realloc_r+0x1e>
	...

08004ca4 <_sbrk_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4d06      	ldr	r5, [pc, #24]	; (8004cc0 <_sbrk_r+0x1c>)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f7fc fd62 	bl	8001778 <_sbrk>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_sbrk_r+0x1a>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_sbrk_r+0x1a>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	2000061c 	.word	0x2000061c

08004cc4 <__malloc_lock>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__malloc_lock+0x8>)
 8004cc6:	f000 b811 	b.w	8004cec <__retarget_lock_acquire_recursive>
 8004cca:	bf00      	nop
 8004ccc:	20000620 	.word	0x20000620

08004cd0 <__malloc_unlock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_unlock+0x8>)
 8004cd2:	f000 b80c 	b.w	8004cee <__retarget_lock_release_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000620 	.word	0x20000620

08004cdc <_malloc_usable_size_r>:
 8004cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce0:	1f18      	subs	r0, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfbc      	itt	lt
 8004ce6:	580b      	ldrlt	r3, [r1, r0]
 8004ce8:	18c0      	addlt	r0, r0, r3
 8004cea:	4770      	bx	lr

08004cec <__retarget_lock_acquire_recursive>:
 8004cec:	4770      	bx	lr

08004cee <__retarget_lock_release_recursive>:
 8004cee:	4770      	bx	lr

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
